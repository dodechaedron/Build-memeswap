{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","_ref","theme","colors","primary","ExpandableSectionButton","_ref2","onClick","expanded","t","useTranslation","_jsxs","aria-label","role","children","_jsx","Text","color","bold","ChevronUpIcon","ChevronDownIcon","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","Flex","justifyContent","Skeleton","width","height","href","symbol","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","TokenPairImage","variant","primaryToken","secondaryToken","flexDirection","Heading","split","CommunityTag","CoreTag","StyledSpacer","props","size","Spacer","spacing","useContext","ThemeContext","s","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","React","Children","toArray","length","map","child","i","_Fragment","StyledTokenInput","input","isWarning","shadows","warning","inset","_ref3","text","StyledInput","Input","_ref4","mediaQueries","xs","_ref5","sm","StyledErrorMessage","ModalInput","_ref6","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","Button","scale","mr","Link","external","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","useState","toastSuccess","toastError","useToast","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","Modal","title","disabled","isFinite","eq","async","console","error","alignSelf","WithdrawModal","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","unstakeFarm","amount","useStakeFarms","onStake","txHash","stakeFarm","info","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","stakedBalanceBigNumber","getBalanceAmount","onPresentDeposit","useModal","fetchFarmUserDataAsync","pids","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","IconButton","MinusIcon","AddIcon","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","useApproveFarm","lpContract","onApprove","tx","approve","address","ethers","constants","MaxUint256","wait","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","userData","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","mt","UnlockButton","ApyButton","apr","displayApr","onPresentApyModal","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","isFarm","event","stopPropagation","ml","CalculateIcon","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","card","background","isPromotedFarm","radii","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","toggled","Details","actionPanelToggled","isXl","useMatchBreakpoints","isMobile","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","targetRef","tooltip","tooltipVisible","useTooltip","placement","tooltipOffset","ref","HelpIcon","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","_ref7","InfoContainer","ValueContainer","_ref8","ValueWrapper","ActionPanel","_ref9","details","isActive","bsc","DualTag","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","ViewMode","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","_createElement","original","scrollToTop","current","scrollIntoView","behavior","FarmTabButtons","hasStakeInFinishedFarms","url","useRouteMatch","activeIndex","ButtonMenu","ButtonMenuItem","as","to","NotificationDot","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","CardViewIcon","TABLE","ListViewIcon","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","farmsLP","userDataLoaded","useFarms","query","setQuery","setViewMode","usePersistState","localStorageKey","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","entry","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","fontWeight","lineHeight","Page","Toggle","checked","Select","options","option","marginLeft","SearchInput","target","renderContent","sort","a","b","Table","FlexLayout","Route","exact","src","alt"],"mappings":"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","file":"static/js/27.e467f81d.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from 'components/_uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading } from 'components/_uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 8px;;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from 'components/_uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'components/_uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'components/_uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await lpContract.approve(masterChefContract.address, ethers.constants.MaxUint256)\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from 'components/_uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from 'components/_uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, displayApr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from 'components/_uikit'\nimport { Farm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`  \n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n                {displayApr}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanLink(lpAddress, 'address')}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from 'components/_uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton\n              lpLabel={lpLabel}\n              cakePrice={cakePrice}\n              apr={originalValue}\n              displayApr={value}\n              addLiquidityUrl={addLiquidityUrl}\n            />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from 'components/_uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from 'components/_uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 8px;;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React, { useState } from 'react'\nimport { Button, Skeleton, Text } from 'components/_uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from 'components/_uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from 'components/_uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 8px;;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"primary_contrast\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from 'components/_uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from 'components/_uikit'\nimport { ChainId } from 'utils/@sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/farms/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n                cakePrice={cakePrice}\n                account={account}\n                removed={false}\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard\n                key={farm.pid}\n                farm={farm}\n                displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n                cakePrice={cakePrice}\n                account={account}\n                removed\n              />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xl\" color=\"primary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Text color=\"text\" fontWeight=\"400\" fontSize=\"24px\" lineHeight=\"24px\">\n          {t('Stake LP tokens to earn.')}\n        </Text>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <div ref={loadMoreRef} />\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}