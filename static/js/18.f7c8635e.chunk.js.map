{"version":3,"sources":["views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/Header.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/Mobile.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx","state/hooks.ts","hooks/useTokenBalance.ts"],"names":["useGetLatestOraclePrice","price","setPrice","useState","ethers","BigNumber","from","lastUpdated","setLastUpdated","refresh","useLastUpdated","useEffect","async","contract","getChainlinkOracleContract","response","latestAnswer","fetchPrice","usePollOraclePrice","seconds","arguments","length","undefined","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollPredictions","useRef","account","useWeb3React","currentEpoch","useGetCurrentEpoch","earliestEpoch","useGetEarliestEpoch","status","useGetPredictionsStatus","current","PredictionStatus","LIVE","liveAndCurrent","fetchRounds","fetchMarketData","epochRange","range","fetchLedgerData","epochs","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","Container","styled","div","_ref","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","_ref2","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","predictionStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","bets","getBetHistory","user","toLowerCase","claimed","winnerBets","filter","bet","position","round","_jsx","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","children","_jsxs","TrophyGoldIcon","width","style","flex","mr","Button","onClick","handleOpenHistory","setHistoryPaneState","IconButton","variant","handleClick","CloseIcon","color","SwiperContext","createContext","SwiperProvider","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","Box","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","Card","CardBody","Heading","mb","ErrorNotification","Text","as","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","betAmount","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","toastSuccess","toastError","useToast","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","payoutAsFloat","parseFloat","betAmountAsFloat","minWidth","mt","ModalHeader","ModalTitle","ModalCloseButton","ModalBody","p","mx","Flex","alignItems","justifyContent","textAlign","fontSize","times","toFormat","tx","claim","receipt","wait","transactionHash","LinkExternal","href","getBscScanLink","isLoading","endIcon","AutoRenewIcon","spin","CollectWinningsButton","hasClaimed","props","onPresentCollectWinningsModal","useModal","disabled","ReclaimPositionButton","formatUsdv2","formatBigNumberToFixed","formatBnbv2","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","hours","minutes","getTimePeriods","minutesSeconds","getMultiplierv2","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getNetPayoutv2","ledger","getPayoutv2","rewardAmount","amountFixed","formatBigNumber","mulUnsafe","subUnsafe","getPriceDifference","lockPrice","sub","StyledTag","bg","Tag","startIcon","icon","ArrowUpIcon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","_ref3","betPosition","isUpPosition","ArrowDownIcon","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","_ref4","Background","_ref5","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","_ref6","card","background","RoundResultBox","_ref7","getPrizePoolAmountHistory","PrizePoolHistoryRow","_ref8","LockPriceHistoryRow","_ref9","RoundResult","hasFailed","closePrice","getBetPosition","HOUSE","gt","isPositionUp","priceDifference","Skeleton","my","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","Divider","hr","BetResult","result","canClaim","useGetRewardRate","targetRef","tooltip","tooltipVisible","useTooltip","fee","placement","isWinner","Result","WIN","returned","getHeaderColor","LOSE","CANCELED","_Fragment","getHeaderText","getHeaderIcon","PrizeIcon","BlockIcon","markBetHistoryAsCollected","betId","claimedHash","getResultColor","toNumber","InfoIcon","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","RoundResultHistory","Link","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","toggleOpen","role","WaitIcon","PlayCircleOutlineIcon","scale","ChevronUpIcon","ChevronDownIcon","Filter","label","StyledHeader","bubblegum","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","HistoryTabs","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","size","ArrowForwardIcon","ButtonMenu","activeIndex","onItemClick","tabIndex","ButtonMenuItem","ROUNDS","Radio","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","getPnlSummary","store","getState","predictions","reduce","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","roundId","OpenNewIcon","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","UnlockButton","Spinner","RoundMultiplierDownArrow","isActive","fill","Svg","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","CheckmarkCircleIcon","EnteredTag","whiteSpace","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","UIKitCard","getTextColorByStatus","StyledCardHeader","getBackgroundColor","cardHeader","warning","Round","CardHeader","isBottom","CollectWinningsOverlay","useGetIsClaimable","CanceledRoundCard","useGetTotalIntervalBlocks","startBlock","estimatedEndBlock","blockNumber","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","initialBlock","useBlock","useGetBetByEpoch","formattedPayout","toUnsafeFloat","hasRoundFailed","getHasRoundFailed","oracleCalled","BlockProgress","currentBlock","rawProgress","progress","Progress","primaryStep","CalculatingCard","TooltipText","GradientBorder","GradientCard","LiveRoundCard","useGetLastOraclePrice","isBull","priceColor","estimatedEndBlockPlusPadding","BLOCK_PADDING","priceAsNumber","countUp","update","useCountUp","start","end","duration","decimals","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","front","back","Error","getComponents","useSwiper","swiperContext","useContext","FlexRow","gasPrice","parseUnits","dust","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","balance","bnbBalance","useGetBnbBalance","minBetAmount","useGetMinBetAmount","bnbBalanceAsBn","useMemo","maxBalance","balanceDisplay","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","formatFixedNumber","key","getButtonProps","minBetAmountBalance","lte","lt","inputAmount","data","token","onMouseOver","handleMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","handleMouseOut","enable","attachEvents","handleGoBack","ArrowBackIcon","BinanceIcon","BalanceInput","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","isWarning","inputProps","Slider","name","min","max","onValueChanged","valueLabel","step","percentShortcut","betMethod","OpenRoundCard","state","setState","isSettingPosition","useGetIntervalBlocks","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","useBlockCountdown","secondsRemaining","setSecondsRemaining","simpleRpcProvider","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","formattedBullMultiplier","isZero","formattedbearMultiplier","Token","lg","Title","Price","Interval","Label","dir","PricePairLabel","display","BnbUsdtPairTokenIcon","TimerLabel","_ref10","unit","pr","PocketWatchIcon","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","handlePrevSlide","slidePrev","handleSlideToLive","currentEpochIndex","findIndex","slideTo","BunnyCardsIcon","handleNextSlide","slideNext","HistoryButton","HistoryIcon","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","HelpIcon","useOnNextRound","previousEpoch","usePreviousValue","SwiperCore","use","Keyboard","Mousewheel","StyledSwiper","Positions","initialIndex","Math","floor","Swiper","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","SwiperSlide","ExpandChartButton","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","ChartIcon","toggleChartPane","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","Cards","MenuWrapper","ChartWrapper","Chart","PageView","StyledMobile","xl","View","isVisible","Mobile","view","getView","HISTORY","CHART","POSITIONS","GradientModalHeader","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","Checkbox","handleSetAcknowledgeRisk","handleSetAcknowledgeBeta","handleConfirm","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","hasAcceptedRisk","setHasAcceptedRisk","usePersistState","localStorageKey","hasAcceptedChart","setHasAcceptedChart","useInitialBlock","isDesktop","onPresentRiskDisclaimer","handleAcceptRiskSuccess","onPresentChartDisclaimer","handleAcceptChart","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","initializePredictions","INITIAL","PageLoader","Helmet","roundData","useGetRounds","useSelector","keys","accum","parseBigNumberObj","ledgers","claimableStatuses","earliestRound","minBy","intervalBlocks","bufferBlocks","currentRoundStartBlockNumber","history","lastOraclePrice","useGetCollectibles","isInitialized","collectibles","identifiers","fetchWalletNfts","tokenIds","nftsInWallet","Nfts","nft","includes","identifier","FetchStatus","setBalance","BIG_ZERO","walletBalance","getBalance","fetchBalance","useTokenBalance","tokenAddress","NOT_FETCHED","SUCCESS","FAILED","balanceState","setBalanceState","fetchStatus","fastRefresh","useRefresh","getBep20Contract","res","balanceOf","e","console","error","prev"],"mappings":"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","file":"static/js/18.f7c8635e.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const contract = getChainlinkOracleContract()\n      const response = await contract.latestAnswer()\n      setPrice(response)\n    }\n\n    fetchPrice()\n  }, [lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 30) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { range } from 'lodash'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollPredictions = () => {\n  const timer = useRef<NodeJS.Timeout>(null)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const earliestEpoch = useGetEarliestEpoch()\n  const status = useGetPredictionsStatus()\n\n  useEffect(() => {\n    // Clear old timer\n    if (timer.current) {\n      clearInterval(timer.current)\n    }\n\n    if (status === PredictionStatus.LIVE) {\n      timer.current = setInterval(async () => {\n        const liveAndCurrent = [currentEpoch, currentEpoch - 1]\n\n        dispatch(fetchRounds(liveAndCurrent))\n        dispatch(fetchMarketData())\n\n        if (account) {\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\n        }\n      }, POLL_TIME_IN_SECONDS * 1000)\n    }\n\n    return () => {\n      if (timer.current) {\n        clearInterval(timer.current)\n      }\n    }\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\n}\n\nexport default usePollPredictions\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from 'components/_uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from 'components/_uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from 'components/_uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import { Bet, BetPosition } from 'state/types'\nimport { formatNumber } from 'utils/formatBalance'\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier * rewardRate\n}\n\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const payout = getPayout(bet, rewardRate)\n  return payout - bet.amount\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from 'components/_uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBscScanLink } from 'utils'\nimport { useAppDispatch } from 'state'\nimport { usePriceBnbBusd } from 'state/farms/hooks'\nimport { fetchClaimableStatuses } from 'state/predictions'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: string\n  betAmount: string\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  betAmount,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = usePriceBnbBusd()\n  const dispatch = useAppDispatch()\n\n  // Convert payout to number for compatibility\n  const payoutAsFloat = parseFloat(payout)\n  const betAmountAsFloat = parseFloat(betAmount)\n\n  const handleClick = async () => {\n    try {\n      const tx = await predictionsContract.claim(epoch)\n      setIsPendingTx(true)\n      const receipt = await tx.wait()\n\n      if (onSuccess) {\n        await onSuccess()\n      }\n\n      await dispatch(fetchClaimableStatuses({ account, epochs: [epoch] }))\n      onDismiss()\n      setIsPendingTx(false)\n      toastSuccess(\n        t('Winnings collected!'),\n        <Box>\n          <Text as=\"p\" mb=\"8px\">\n            {t('Your prizes have been sent to your wallet')}\n          </Text>\n          {receipt.transactionHash && (\n            <LinkExternal href={getBscScanLink(receipt.transactionHash, 'transaction')}>\n              {t('View on BscScan')}\n            </LinkExternal>\n          )}\n        </Box>,\n      )\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsPendingTx(false)\n    }\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Your position')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${betAmount} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${bnbBusdPrice.times(betAmountAsFloat).toFormat(2)}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{t('Your winnings')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${payout} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${bnbBusdPrice.times(payoutAsFloat).toFormat(2)}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from 'components/_uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: string\n  betAmount: string\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  betAmount,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} betAmount={betAmount} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = async () => {\n    const tx = await predictionsContract.claim(epoch)\n    setIsPendingTx(true)\n\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      if (onSuccess) {\n        await onSuccess()\n      }\n      setIsPendingTx(false)\n      toastSuccess(t('Position reclaimed!'))\n    } else {\n      setIsPendingTx(false)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import { ethers } from 'ethers'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { formatBigNumber, formatBigNumberToFixed } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const formatUsdv2 = (usd: ethers.BigNumber) => {\n  return `$${formatBigNumberToFixed(usd, 3, 8)}`\n}\n\nexport const formatBnbv2 = (bnb: ethers.BigNumber) => {\n  const value = bnb || ethers.BigNumber.from(0)\n  return formatBigNumberToFixed(value, 4)\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getHasRoundFailed = (round: NodeRound, blockNumber: number) => {\n  if (!round.endBlock) {\n    return false\n  }\n\n  return blockNumber > round.endBlock && round.oracleCalled === false\n}\n\nexport const getMultiplierv2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\n  if (!total) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  if (total.eq(0) || amount.eq(0)) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\n\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\n}\n\nexport const getPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\n  if (!ledger || !round) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const { bullAmount, bearAmount, rewardAmount } = round\n  const { amount, position } = ledger\n\n  const amountFixed = ethers.FixedNumber.from(formatBigNumber(amount))\n  const multiplier = getMultiplierv2(rewardAmount, position === BetPosition.BULL ? bullAmount : bearAmount)\n  return amountFixed.mulUnsafe(multiplier)\n}\n\nexport const getNetPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\n  if (!ledger || !round) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const payout = getPayoutv2(ledger, round)\n  const amount = ethers.FixedNumber.from(formatBigNumber(ledger.amount))\n\n  return payout.subUnsafe(amount)\n}\n\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!price || !lockPrice) {\n    return ethers.BigNumber.from(0)\n  }\n\n  return price.sub(lockPrice)\n}\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from 'components/_uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, NodeRound, Round } from 'state/types'\nimport { formatUsdv2, formatBnbv2 } from '../../helpers'\nimport { formatBnb, formatUsd } from '../History/helpers'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: NodeRound['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnbv2(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: NodeRound['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.cardBorder\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 8px;;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n\n/**\n * TODO: Remove\n *\n * This is a temporary function until we consolidate the data coming from the graph versus the node\n */\ninterface PrizePoolHistoryRowProps extends FlexProps {\n  totalAmount: number\n}\n\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\ninterface LockPriceHistoryRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n/**\n * END TEMPORARY COMPONENTS\n */\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport { BoxProps, Flex, Skeleton, Text } from 'components/_uikit'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: NodeRound\n  hasFailed?: boolean\n}\n\nconst getBetPosition = (closePrice: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!closePrice) {\n    return null\n  }\n\n  if (closePrice.eq(lockPrice)) {\n    return BetPosition.HOUSE\n  }\n\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = getBetPosition(closePrice, lockPrice)\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {hasFailed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {closePrice ? (\n            <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n              {formatUsdv2(closePrice)}\n            </Text>\n          ) : (\n            <Skeleton height=\"34px\" my=\"1px\" />\n          )}\n          <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import React from 'react'\nimport { BoxProps, Flex, Text } from 'components/_uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../History/helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getPredictionsContract } from 'utils/contractHelpers'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract()\n      const canClaim = await predictionsContract.claimable(epoch, account)\n\n      if (canClaim) {\n        const refundable = await predictionsContract.refundable(epoch, account)\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from 'components/_uikit'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetRewardRate } from 'state/hooks'\nimport { usePriceBnbBusd } from 'state/farms/hooks'\nimport styled from 'styled-components'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport { getBscScanLink } from 'utils'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 8px;;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst Divider = styled.hr`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const canClaim = !bet.claimed && bet.position === bet.round.position\n  const rewardRate = useGetRewardRate()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\n    { placement: 'auto' },\n  )\n\n  const isWinner = result === Result.WIN\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = isWinner ? getNetPayout(bet, rewardRate) : bet.amount\n  const returned = payout + bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton\n            payout={formatBnb(payout)}\n            betAmount={bet.amount.toString()}\n            epoch={bet.round.epoch}\n            hasClaimed={!canClaim}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {bet.claimed && (\n          <Flex justifyContent=\"center\">\n            <LinkExternal href={getBscScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\n              {t('View on BscScan')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}:</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n        {isWinner && (\n          <>\n            <Divider />\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('Amount to collect')}:\n              </Text>\n              <Flex justifyContent=\"end\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\n                <span ref={targetRef}>\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\n                </span>\n              </Flex>\n              {tooltipVisible && tooltip}\n            </Flex>\n          </>\n        )}\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Text, Link, Heading } from 'components/_uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\nimport BetResult from './BetResult'\nimport { getMultiplier } from './helpers'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResultHistory round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResultHistory>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{t('Opening Block')}</Text>\n        <Link href={getBscScanLink(bet.round.lockBlock, 'block')} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{t('Closing Block')}</Text>\n        <Link href={getBscScanLink(bet.round.endBlock, 'block')} external>\n          {bet.round.endBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from 'components/_uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useGetCurrentEpoch, useGetPredictionsStatus, useGetRewardRate } from 'state/hooks'\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n  const rewardRate = useGetRewardRate()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = !bet.claimed && bet.position === bet.round.position\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, rewardRate) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            epoch={bet.round.epoch}\n            payout={formatBnb(payout)}\n            onSuccess={handleSuccess}\n            betAmount={bet.amount.toString()}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from 'components/_uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.id} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from 'components/_uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../helpers'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: BigNumber\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { getBscScanLink } from 'utils'\nimport store from 'state'\nimport { useGetCurrentEpoch } from 'state/hooks'\nimport { usePriceBnbBusd } from 'state/farms/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  const state = store.getState()\n  const rewardRate = state.predictions.rewardRate / 100\n\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet, rewardRate)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.id, payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getBscScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from 'components/_uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchHistory } from 'state/predictions'\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\nimport { HistoryFilter } from 'state/types'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const { t } = useTranslation()\n  const bets = useGetHistoryByAccount(account)\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  // Currently the api cannot filter by unclaimed AND won so we do it here\n  // when the user has selected Uncollected only include positions they won\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\n\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <UnlockButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from 'components/_uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport styled from 'styled-components'\nimport { CheckmarkCircleIcon, Tag, useTooltip } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnbv2 } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: ethers.BigNumber\n}\n\nconst StyledEnteredTag = styled(Tag).attrs({\n  variant: 'secondary',\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\n})`\n  font-weight: bold;\n  text-transform: uppercase;\n`\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: ethers.BigNumber\n  multiplier?: string\n  hasEntered?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import styled from 'styled-components'\nimport { Card as UIKitCard } from 'components/_uikit'\n\nconst Card = styled(UIKitCard)`\n  border-radius: 8px;;\n`\n\nexport default Card\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from 'components/_uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  blockNumber: number\n  icon?: ReactElement\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  border-radius: 8px; 16px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from 'components/_uikit'\nimport { useGetIsClaimable } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  epoch: number\n  payout: string\n  betAmount: string\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  epoch,\n  payout,\n  betAmount,\n  isBottom = false,\n  ...props\n}) => {\n  const { t } = useTranslation()\n  const isClaimable = useGetIsClaimable(epoch)\n\n  if (!isClaimable) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton payout={payout} betAmount={betAmount} epoch={epoch} hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: NodeRound\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch, startBlock } = round\n  const estimatedEndBlock = startBlock + interval\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, BlockIcon, CardBody } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\nimport { useGetBetByEpoch } from 'state/hooks'\nimport { useBlock } from 'state/block/hooks'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { getHasRoundFailed, getNetPayoutv2 } from '../../helpers'\nimport { RoundResult } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface ExpiredRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { initialBlock } = useBlock()\n  const { epoch, endBlock, lockPrice, closePrice } = round\n\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const ledger = useGetBetByEpoch(account, epoch)\n  const payout = getNetPayoutv2(ledger, round)\n  const formattedPayout = payout.toUnsafeFloat().toFixed(4)\n  const hasRoundFailed = getHasRoundFailed(round, initialBlock)\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          blockNumber={endBlock}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n          />\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay\n        epoch={epoch}\n        payout={formattedPayout}\n        betAmount={betAmount ? formatBigNumberToFixed(betAmount, 4) : '0'}\n        isBottom={hasEnteredDown}\n      />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from 'components/_uikit'\nimport { useBlock } from 'state/block/hooks'\n\ninterface BlockProgressProps extends ProgressProps {\n  startBlock: number\n  endBlock: number\n}\n\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\n  const { currentBlock } = useBlock()\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default BlockProgress\n","import React from 'react'\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: NodeRound\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const estimatedEndBlock = round.startBlock + interval\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport { useCountUp } from 'react-countup'\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\nimport { BLOCK_PADDING } from 'state/predictions'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetLastOraclePrice } from 'state/hooks'\nimport { useBlock } from 'state/block/hooks'\nimport BlockProgress from 'components/BlockProgress'\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 8px;;\n  padding: 1px;\n`\n\nconst GradientCard = styled(Card)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n`\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, lockBlock, endBlock, totalAmount } = round\n  const { currentBlock } = useBlock()\n  const price = useGetLastOraclePrice()\n\n  const isBull = lockPrice && price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n  const estimatedEndBlockPlusPadding = endBlock + BLOCK_PADDING\n\n  const priceDifference = getPriceDifference(price, lockPrice)\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  if (currentBlock > estimatedEndBlockPlusPadding) {\n    return <CalculatingCard round={round} />\n  }\n\n  return (\n    <GradientBorder>\n      <GradientCard>\n        <CardHeader\n          status=\"live\"\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n          title={t('Live')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlockPlusPadding}\n        />\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlockPlusPadding} />\n        <CardBody p=\"16px\">\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            hasEntered={hasEnteredUp}\n            isActive={isBull}\n          />\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n              {t('Last Price')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n              <div ref={targetRef}>\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n                </TooltipText>\n              </div>\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n                {formatUsdv2(priceDifference)}\n              </PositionTag>\n            </Flex>\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n            <PrizePoolRow totalAmount={totalAmount} />\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            isActive={!isBull}\n          />\n        </CardBody>\n      </GradientCard>\n      {tooltipVisible && tooltip}\n    </GradientBorder>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from 'components/_uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from 'components/_uikit'\nimport { ethers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport PositionTag from '../PositionTag'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: string, hash: string) => Promise<void>\n}\n\n// /!\\ TEMPORARY /!\\\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\n// TODO: Remove on beta-v2 smart contract release.\nconst gasPrice = parseUnits('6', 'gwei')\nconst dust = parseUnits('0.01', 18)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getButtonProps = (\n  value: ethers.BigNumber,\n  bnbBalance: ethers.BigNumber,\n  minBetAmountBalance: ethers.BigNumber,\n) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(bnbBalance)\n    }\n    return bnbBalance.gt(0)\n  }\n\n  if (!hasSufficientBalance()) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0)) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst getValueAsEthersBn = (value: string) => {\n  const valueAsFloat = parseFloat(value)\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [percent, setPercent] = useState(0)\n\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  // Convert bnb balance to ethers.BigNumber\n  const bnbBalanceAsBn = useMemo(() => {\n    return ethers.BigNumber.from(bnbBalance.toString())\n  }, [bnbBalance])\n  const maxBalance = useMemo(() => {\n    return bnbBalanceAsBn.gt(dust) ? bnbBalanceAsBn.sub(dust) : dust\n  }, [bnbBalanceAsBn])\n  const balanceDisplay = formatBigNumber(bnbBalanceAsBn)\n\n  const valueAsBn = getValueAsEthersBn(value)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n\n  const handleInputChange = (input: string) => {\n    const inputAsBn = getValueAsEthersBn(input)\n\n    if (inputAsBn.eq(0)) {\n      setPercent(0)\n    } else {\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\n      const percentageAsFloat = percentage.toUnsafeFloat()\n\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\n    }\n    setValue(input)\n  }\n\n  const handlePercentChange = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\n      setValue(formatFixedNumber(balancePercentage))\n    } else {\n      setValue('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    setPercent(0)\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\n\n  const handleEnterPosition = async () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n\n    try {\n      const tx = await predictionsContract[betMethod]({ value: valueAsBn.toString(), gasPrice })\n      setIsTxPending(true)\n      const receipt = await tx.wait()\n      onSuccess(valueAsBn.toString(), receipt.transactionHash as string)\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsTxPending(false)\n    }\n  }\n\n  // Warnings\n  useEffect(() => {\n    const inputAmount = getValueAsEthersBn(value)\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleInputChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handlePercentChange}\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\n          step={0.01}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percentShortcut) => {\n            const handleClick = () => {\n              handlePercentChange(percentShortcut)\n            }\n\n            return (\n              <Button\n                key={percentShortcut}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percentShortcut}%`}\n              </Button>\n            )\n          })}\n          <Button\n            scale=\"xs\"\n            variant=\"tertiary\"\n            onClick={() => handlePercentChange(100)}\n            disabled={!account || isTxPending}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { useGetIntervalBlocks } from 'state/hooks'\nimport { useBlock } from 'state/block/hooks'\nimport { BLOCK_PADDING, fetchLedgerData } from 'state/predictions'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { formatBnbv2 } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const interval = useGetIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { currentBlock } = useBlock()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = currentBlock >= round.startBlock + (interval + BLOCK_PADDING)\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n  const estimatedLockBlock = round.startBlock + (interval + BLOCK_PADDING)\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getCanEnterPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      t('%position% position entered', {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={estimatedLockBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { simpleRpcProvider } from 'utils/providers'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const currentBlock = await simpleRpcProvider.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useRoundCountdown = (intervalsToAdd = 1) => {\n  const interval = useGetIntervalBlocks()\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\n  const blocksToAdd = intervalsToAdd * interval\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\n\n  return seconds\n}\n\nexport default useRoundCountdown\n","import React from 'react'\nimport { CardBody, Text, WaitIcon } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\nimport { formatRoundTime } from '../../helpers'\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: NodeRound\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const currentEpoch = useGetCurrentEpoch()\n  const estimatedEndBlock = round.startBlock + interval\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\n  const countdown = formatRoundTime(seconds)\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"soon\"\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Later')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/hooks'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { getMultiplierv2 } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: NodeRound\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const ledger = useGetBetByEpoch(account, epoch)\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\n  const bullMultiplier = getMultiplierv2(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplierv2(totalAmount, bearAmount)\n\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\n  const formattedbearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={ledger?.amount}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedbearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={ledger?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedbearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      betAmount={ledger?.amount}\n      bullMultiplier={formattedBullMultiplier}\n      bearMultiplier={formattedbearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from 'components/_uikit'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetLastOraclePrice } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useRoundCountdown from '../hooks/useRoundCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 70px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  display: flex;\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: 8px;;\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n  unit: 'm' | 'h' | 'd'\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\n  const seconds = useRoundCountdown()\n  const countdown = formatRoundTime(seconds)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {seconds === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from 'components/_uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Card)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from 'components/_uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from 'components/_uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5\" unit=\"m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from 'components/_uikit'\nimport { useGetSortedRounds } from 'state/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC = () => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const initialIndex = Math.floor(rounds.length / 2)\n\n  useOnNextRound()\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={initialIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          freeModeMomentumRatio={0.25}\n          freeModeMomentumVelocityRatio={0.5}\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.epoch}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from 'components/_uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && (\n              <div>\n                <Positions />\n              </div>\n            )}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from 'components/_uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from 'components/_uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from 'components/_uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\n\nenum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ChartDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Text as=\"p\" mb=\"16px\">\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\n        </Text>\n        <Text as=\"p\" mb=\"16px\">\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\n        </Text>\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n          {t('I understand')}\n        </Button>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n            external\n          >\n            {t('Learn More')}\n          </LinkExternal>\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from 'components/_uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/hooks'\nimport { useInitialBlock } from 'state/block/hooks'\nimport { initializePredictions } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollPredictions from './hooks/usePollPredictions'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst Predictions = () => {\n  const { isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_accepted_risk',\n  })\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_chart',\n  })\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const handleAcceptChart = () => setHasAcceptedChart(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\n\n  useEffect(() => {\n    if (initialBlock > 0) {\n      // Do not start initialization until the first block has been retrieved\n      dispatch(initializePredictions(account))\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollPredictions()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n","import { useEffect, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport Nfts from 'config/constants/nfts'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from './types'\nimport { fetchWalletNfts } from './collectibles'\nimport { parseBigNumberObj } from './predictions/helpers'\n\n// /!\\\n// Don't add anything here. These hooks will be moved the the predictions folder\n\n// Predictions\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalBlocks = () => {\n  return useSelector((state: State) => state.predictions.intervalBlocks)\n}\n\nexport const useGetBufferBlocks = () => {\n  return useSelector((state: State) => state.predictions.bufferBlocks)\n}\n\nexport const useGetTotalIntervalBlocks = () => {\n  const intervalBlocks = useGetIntervalBlocks()\n  const bufferBlocks = useGetBufferBlocks()\n  return intervalBlocks + bufferBlocks\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  return rounds.find((round) => round.epoch === currentEpoch)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetRewardRate = () => {\n  const rewardRate = useSelector((state: State) => state.predictions.rewardRate)\n  return rewardRate / 100\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetLedgerByRoundId = (account: string, roundId: string) => {\n  const ledgers = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!ledgers[account]) {\n    return null\n  }\n\n  if (!ledgers[account][roundId]) {\n    return null\n  }\n\n  return ledgers[account][roundId]\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n// Collectibles\nexport const useGetCollectibles = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\n  const identifiers = Object.keys(data)\n\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account))\n    }\n  }, [isInitialized, account, dispatch])\n\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.balanceOf(account)\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.totalSupply()\n      setTotalSupply(new BigNumber(supply.toString()))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res.toString()))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await simpleRpcProvider.getBalance(account)\n      setBalance(new BigNumber(walletBalance.toString()))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n"],"sourceRoot":""}