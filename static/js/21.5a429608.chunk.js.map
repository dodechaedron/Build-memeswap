{"version":3,"sources":["state/burn/hooks.ts","views/RemoveLiquidity/index.tsx","hooks/useDebouncedChangeHandler.ts","components/Links/index.tsx"],"names":["useBurnState","useSelector","state","burn","BorderCard","styled","div","_ref","theme","colors","cardBorder","RemoveLiquidity","_ref2","_useCurrency","_useCurrency2","_parsedAmounts$Field$","_parsedAmounts$Field$2","_parsedAmounts$Field$3","_parsedAmounts$Field$4","_parsedAmounts$Field$5","_parsedAmounts$Field$6","_parsedAmounts$Field$7","_pair$liquidityToken","_parsedAmounts$Field$13","_parsedAmounts$Field$14","_currencyA$symbol2","_parsedAmounts$Field$15","_parsedAmounts$Field$16","_currencyB$symbol2","_currencyA$symbol3","_currencyB$symbol3","history","match","params","currencyIdA","currencyIdB","currencyA","currencyB","useCurrency","undefined","account","chainId","library","useActiveWeb3React","tokenA","tokenB","useMemo","wrappedCurrency","t","useTranslation","independentField","typedValue","pair","parsedAmounts","error","_pair$liquidityToken$","useWeb3React","usePair","relevantTokenBalances","useTokenBalances","liquidityToken","userLiquidity","address","tokens","Field","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","useTotalSupply","liquidityValueA","JSBI","greaterThanOrEqual","raw","TokenAmount","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","Percent","LIQUIDITY_PERCENT","independentAmount","tryParseAmount","greaterThan","liquidityValue","token","multiply","quotient","_error","useDerivedBurnInfo","onUserInput","_onUserInput","dispatch","useDispatch","useCallback","field","typeInput","useBurnActionHandlers","isValid","showDetailed","setShowDetailed","useState","attemptingTxn","setAttemptingTxn","txHash","setTxHash","deadline","useTransactionDeadline","allowedSlippage","useUserSlippageTolerance","formattedAmounts","equalTo","lessThan","toFixed","toSignificant","atMaxAmount","pairContract","usePairContract","signatureData","setSignatureData","approval","approveCallback","useApproveCallback","ROUTER_ADDRESS","value","onLiquidityInput","onCurrencyAInput","onCurrencyBInput","addTransaction","useTransactionAdder","async","onRemove","Error","currencyAmountA","currencyAmountB","router","getRouterContract","amountsMin","calculateSlippageAmount","liquidityAmount","currencyBIsETH","ETHER","oneCurrencyIsETH","estimate","method","args","estimateGas","removeLiquidityETH","toString","toHexString","removeLiquidity","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","_parsedAmounts$Field$8","_parsedAmounts$Field$9","summary","symbol","hash","catch","err","code","console","modalHeader","_parsedAmounts$Field$10","_parsedAmounts$Field$11","_jsxs","AutoColumn","gap","children","RowBetween","align","_jsx","Text","fontSize","color","RowFixed","CurrencyLogo","currency","size","ml","AddIcon","width","small","textAlign","pt","slippage","modalBottom","_currencyA$symbol","_currencyB$symbol","_parsedAmounts$Field$12","_Fragment","assetA","assetB","DoubleCurrencyLogo","currency0","currency1","margin","priceOf","Button","disabled","ApprovalState","APPROVED","onClick","pendingText","amountA","symbolA","amountB","symbolB","liquidityPercentChangeCallback","oneCurrencyIsWETH","Boolean","currencyEquals","WETH","handleSelectCurrencyA","currencyId","push","handleSelectCurrencyB","handleDismissConfirmation","innerLiquidityPercentage","setInnerLiquidityPercentage","onChange","debouncedMs","arguments","length","inner","setInner","timer","useRef","onChangeInner","newValue","current","clearTimeout","setTimeout","useEffect","useDebouncedChangeHandler","Number","parseInt","onPresentRemoveLiquidity","useModal","TransactionConfirmationModal","title","customOnDismiss","content","ConfirmationModalContent","topContent","bottomContent","Page","AppBody","AppHeader","backTo","subtitle","noConfig","CardBody","variant","scale","bold","mb","style","lineHeight","Slider","name","min","max","onValueChanged","Math","ceil","Flex","flexWrap","justifyContent","ColumnCenter","ArrowDownIcon","my","textTransform","LightGreyCard","id","StyledInternalLink","to","Box","CurrencyInputPanel","onMax","showMaxButton","disableCurrencySelect","onCurrencySelect","hideBalance","label","marginTop","position","mt","nonce","nonces","domain","version","verifyingContract","message","owner","spender","toNumber","data","JSON","stringify","types","EIP712Domain","type","Permit","primaryType","send","splitSignature","signature","v","r","s","NOT_APPROVED","mr","PENDING","Dots","UnlockButton","minWidth","maxWidth","MinimalPositionCard","showUnwrapped","Link","primary"],"mappings":"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","file":"static/js/21.5a429608.chunk.js","sourcesContent":["import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from 'utils/@sdk'\nimport { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useWeb3React } from '@web3-react/core'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { usePair } from 'hooks/usePairs'\nimport useTotalSupply from 'hooks/useTotalSupply'\n\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useTokenBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nexport function useBurnState(): AppState['burn'] {\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: CurrencyAmount\n    [Field.CURRENCY_B]?: CurrencyAmount\n  }\n  error?: string\n} {\n  const { account, chainId } = useWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else if (tokens[independentField]) {\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n    const liquidityValue = liquidityValues[independentField]\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n      percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: TokenAmount\n    [Field.CURRENCY_B]?: TokenAmount\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\n        : undefined,\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? 'Enter an amount'\n  }\n\n  return { pair, parsedAmounts, error }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onUserInput,\n  }\n}\n","import React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { splitSignature } from '@ethersproject/bytes'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Currency, currencyEquals, ETHER, Percent, WETH } from 'utils/@sdk'\nimport { Button, Text, AddIcon, ArrowDownIcon, CardBody, Slider, Box, Flex, useModal } from 'components/_uikit'\nimport { RouteComponentProps } from 'react-router'\nimport { useTranslation } from 'contexts/Localization'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport { AppHeader, AppBody } from '../../components/App'\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\nimport UnlockButton from '../../components/UnlockButton'\nimport { LightGreyCard } from '../../components/Card'\n\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../../components/Logo'\nimport { ROUTER_ADDRESS } from '../../config/constants'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { usePairContract } from '../../hooks/useContract'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\n\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport StyledInternalLink from '../../components/Links'\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\nimport { currencyId } from '../../utils/currencyId'\nimport useDebouncedChangeHandler from '../../hooks/useDebouncedChangeHandler'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\nimport Dots from '../../components/Loader/Dots'\nimport { useBurnActionHandlers, useDerivedBurnInfo, useBurnState } from '../../state/burn/hooks'\n\nimport { Field } from '../../state/burn/actions'\nimport { useUserSlippageTolerance } from '../../state/user/hooks'\nimport Page from '../Page'\n\nconst BorderCard = styled.div`\n  border: solid 1px ${({ theme }) => theme.colors.cardBorder};\n  border-radius: 8px;;\n  padding: 16px;\n`\n\nexport default function RemoveLiquidity({\n  history,\n  match: {\n    params: { currencyIdA, currencyIdB },\n  },\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string }>) {\n  const [currencyA, currencyB] = [useCurrency(currencyIdA) ?? undefined, useCurrency(currencyIdB) ?? undefined]\n  const { account, chainId, library } = useActiveWeb3React()\n  const [tokenA, tokenB] = useMemo(\n    () => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)],\n    [currencyA, currencyB, chainId],\n  )\n\n  const { t } = useTranslation()\n\n  // burn state\n  const { independentField, typedValue } = useBurnState()\n  const { pair, parsedAmounts, error } = useDerivedBurnInfo(currencyA ?? undefined, currencyB ?? undefined)\n  const { onUserInput: _onUserInput } = useBurnActionHandlers()\n  const isValid = !error\n\n  // modal and loading\n  const [showDetailed, setShowDetailed] = useState<boolean>(false)\n  const [attemptingTxn, setAttemptingTxn] = useState(false) // clicked confirm\n\n  // txn values\n  const [txHash, setTxHash] = useState<string>('')\n  const deadline = useTransactionDeadline()\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const formattedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: parsedAmounts[Field.LIQUIDITY_PERCENT].equalTo('0')\n      ? '0'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].lessThan(new Percent('1', '100'))\n      ? '<1'\n      : parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0),\n    [Field.LIQUIDITY]:\n      independentField === Field.LIQUIDITY ? typedValue : parsedAmounts[Field.LIQUIDITY]?.toSignificant(6) ?? '',\n    [Field.CURRENCY_A]:\n      independentField === Field.CURRENCY_A ? typedValue : parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    [Field.CURRENCY_B]:\n      independentField === Field.CURRENCY_B ? typedValue : parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n  }\n\n  const atMaxAmount = parsedAmounts[Field.LIQUIDITY_PERCENT]?.equalTo(new Percent('1'))\n\n  // pair contract\n  const pairContract: Contract | null = usePairContract(pair?.liquidityToken?.address)\n\n  // allowance handling\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\n  const [approval, approveCallback] = useApproveCallback(parsedAmounts[Field.LIQUIDITY], ROUTER_ADDRESS)\n\n  async function onAttemptToApprove() {\n    if (!pairContract || !pair || !library || !deadline) throw new Error('missing dependencies')\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n    // try to gather a signature for permission\n    const nonce = await pairContract.nonces(account)\n\n    const EIP712Domain = [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'verifyingContract', type: 'address' },\n    ]\n    const domain = {\n      name: '1TRC LPs',\n      version: '1',\n      chainId,\n      verifyingContract: pair.liquidityToken.address,\n    }\n    const Permit = [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ]\n    const message = {\n      owner: account,\n      spender: ROUTER_ADDRESS,\n      value: liquidityAmount.raw.toString(),\n      nonce: nonce.toHexString(),\n      deadline: deadline.toNumber(),\n    }\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit,\n      },\n      domain,\n      primaryType: 'Permit',\n      message,\n    })\n\n    library\n      .send('eth_signTypedData_v4', [account, data])\n      .then(splitSignature)\n      .then((signature) => {\n        setSignatureData({\n          v: signature.v,\n          r: signature.r,\n          s: signature.s,\n          deadline: deadline.toNumber(),\n        })\n      })\n      .catch((err) => {\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\n        if (err?.code !== 4001) {\n          approveCallback()\n        }\n      })\n  }\n\n  // wrapped onUserInput to clear signatures\n  const onUserInput = useCallback(\n    (field: Field, value: string) => {\n      setSignatureData(null)\n      return _onUserInput(field, value)\n    },\n    [_onUserInput],\n  )\n\n  const onLiquidityInput = useCallback((value: string): void => onUserInput(Field.LIQUIDITY, value), [onUserInput])\n  const onCurrencyAInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_A, value), [onUserInput])\n  const onCurrencyBInput = useCallback((value: string): void => onUserInput(Field.CURRENCY_B, value), [onUserInput])\n\n  // tx sending\n  const addTransaction = useTransactionAdder()\n  async function onRemove() {\n    if (!chainId || !library || !account || !deadline) throw new Error('missing dependencies')\n    const { [Field.CURRENCY_A]: currencyAmountA, [Field.CURRENCY_B]: currencyAmountB } = parsedAmounts\n    if (!currencyAmountA || !currencyAmountB) {\n      throw new Error('missing currency amounts')\n    }\n    const router = getRouterContract(chainId, library, account)\n\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(currencyAmountA, allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(currencyAmountB, allowedSlippage)[0],\n    }\n\n    if (!currencyA || !currencyB) throw new Error('missing tokens')\n    const liquidityAmount = parsedAmounts[Field.LIQUIDITY]\n    if (!liquidityAmount) throw new Error('missing liquidity amount')\n\n    const currencyBIsETH = currencyB === ETHER\n    const oneCurrencyIsETH = currencyA === ETHER || currencyBIsETH\n\n    if (!tokenA || !tokenB) throw new Error('could not wrap')\n    let estimate\n    let method: (...args: any) => Promise<TransactionResponse>\n    let args: Array<string | string[] | number | boolean>\n    // if (approval === ApprovalState.APPROVED ) {\n      // removeLiquidityETH\n      if (oneCurrencyIsETH) {\n        estimate = router.estimateGas.removeLiquidityETH\n        method = router.removeLiquidityETH\n        args = [\n          currencyBIsETH ? tokenA.address : tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n          amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n          account,\n          deadline.toHexString(),\n        ]\n      }\n      // removeLiquidity\n      else {\n        estimate = router.estimateGas.removeLiquidity\n        method = router.removeLiquidity\n        args = [\n          tokenA.address,\n          tokenB.address,\n          liquidityAmount.raw.toString(),\n          amountsMin[Field.CURRENCY_A].toString(),\n          amountsMin[Field.CURRENCY_B].toString(),\n          account,\n          deadline.toHexString(),\n        ]\n      }\n    // }\n    // we have a signataure, use permit versions of remove liquidity\n    // else if (signatureData !== null) {\n    //   // removeLiquidityETHWithPermit\n    //   if (oneCurrencyIsETH) {\n    //     estimate = router.estimateGas.removeLiquidityETHWithPermit\n    //     method = router.removeLiquidityETHWithPermit\n    //     args = [\n    //       currencyBIsETH ? tokenA.address : tokenB.address,\n    //       liquidityAmount.raw.toString(),\n    //       amountsMin[currencyBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n    //       amountsMin[currencyBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n    //       account,\n    //       signatureData.deadline,\n    //       false,\n    //       signatureData.v,\n    //       signatureData.r,\n    //       signatureData.s,\n    //     ]\n    //   }\n    //   // removeLiquidityETHWithPermit\n    //   else {\n    //     estimate = router.estimateGas.removeLiquidityWithPermit\n    //     method = router.removeLiquidityWithPermit\n    //     args = [\n    //       tokenA.address,\n    //       tokenB.address,\n    //       liquidityAmount.raw.toString(),\n    //       amountsMin[Field.CURRENCY_A].toString(),\n    //       amountsMin[Field.CURRENCY_B].toString(),\n    //       account,\n    //       signatureData.deadline,\n    //       false,\n    //       signatureData.v,\n    //       signatureData.r,\n    //       signatureData.s,\n    //     ]\n    //   }\n    // } else {\n    //   throw new Error('Attempting to confirm without approval or a signature. Please contact support.')\n    // }\n\n    setAttemptingTxn(true)\n    await estimate(...args)\n    .then((estimatedGasLimit) =>\n      method(...args, {\n        gasLimit: calculateGasMargin(estimatedGasLimit),\n      }).then((response) => {\n        setAttemptingTxn(false)\n        addTransaction(response, {\n          summary: `Remove ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\n            currencyA?.symbol\n          } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencyB?.symbol}`,\n        })\n\n        setTxHash(response.hash)\n      }),\n    )\n    .catch((err) => {\n      setAttemptingTxn(false)\n      // we only care if the error is something _other_ than the user rejected the tx\n      if (err?.code !== 4001) {\n        console.error(err)\n      }\n    })\n  }\n\n  function modalHeader() {\n    return (\n      <AutoColumn gap=\"md\">\n        <RowBetween align=\"flex-end\">\n          <Text fontSize=\"24px\"  color=\"background\">{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\n          <RowFixed gap=\"4px\">\n            <CurrencyLogo currency={currencyA} size=\"24px\" />\n            <Text fontSize=\"24px\" ml=\"10px\"  color=\"background\">\n              {currencyA?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowFixed>\n          <AddIcon width=\"16px\" />\n        </RowFixed>\n        <RowBetween align=\"flex-end\">\n          <Text fontSize=\"24px\"  color=\"background\">{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\n          <RowFixed gap=\"4px\">\n            <CurrencyLogo currency={currencyB} size=\"24px\" />\n            <Text fontSize=\"24px\" ml=\"10px\"  color=\"background\">\n              {currencyB?.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n\n        <Text small textAlign=\"left\" pt=\"12px\" color=\"background\">\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\n            slippage: allowedSlippage / 100,\n          })}\n        </Text>\n      </AutoColumn>\n    )\n  }\n\n  function modalBottom() {\n    return (\n      <>\n        <RowBetween>\n          {t('%assetA%/%assetB% Burned', { assetA: currencyA?.symbol ?? '', assetB: currencyB?.symbol ?? '' })}\n          <RowFixed>\n            <DoubleCurrencyLogo currency0={currencyA} currency1={currencyB} margin />\n            <Text  color=\"background\">{parsedAmounts[Field.LIQUIDITY]?.toSignificant(6)}</Text>\n          </RowFixed>\n        </RowBetween>\n        {pair && (\n          <>\n            <RowBetween>\n              <Text  color=\"background\">{t('Price')}</Text>\n              <Text  color=\"background\">\n                1 {currencyA?.symbol} = {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\n              </Text>\n            </RowBetween>\n            <RowBetween>\n              <div />\n              <Text  color=\"background\">\n                1 {currencyB?.symbol} = {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\n              </Text>\n            </RowBetween>\n          </>\n        )}\n        <Button disabled={!(approval === ApprovalState.APPROVED || signatureData !== null)} onClick={onRemove}>\n          {t('Confirm')}\n        </Button>\n      </>\n    )\n  }\n\n  const pendingText = t('Removing %amountA% %symbolA% and %amountB% %symbolB%', {\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\n    symbolA: currencyA?.symbol ?? '',\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\n    symbolB: currencyB?.symbol ?? '',\n  })\n\n  const liquidityPercentChangeCallback = useCallback(\n    (value: number) => {\n      onUserInput(Field.LIQUIDITY_PERCENT, value.toString())\n    },\n    [onUserInput],\n  )\n\n  const oneCurrencyIsETH = currencyA === ETHER || currencyB === ETHER\n  const oneCurrencyIsWETH = Boolean(\n    chainId &&\n      ((currencyA && currencyEquals(WETH[chainId], currencyA)) ||\n        (currencyB && currencyEquals(WETH[chainId], currencyB))),\n  )\n\n  const handleSelectCurrencyA = useCallback(\n    (currency: Currency) => {\n      if (currencyIdB && currencyId(currency) === currencyIdB) {\n        history.push(`/remove/${currencyId(currency)}/${currencyIdA}`)\n      } else {\n        history.push(`/remove/${currencyId(currency)}/${currencyIdB}`)\n      }\n    },\n    [currencyIdA, currencyIdB, history],\n  )\n  const handleSelectCurrencyB = useCallback(\n    (currency: Currency) => {\n      if (currencyIdA && currencyId(currency) === currencyIdA) {\n        history.push(`/remove/${currencyIdB}/${currencyId(currency)}`)\n      } else {\n        history.push(`/remove/${currencyIdA}/${currencyId(currency)}`)\n      }\n    },\n    [currencyIdA, currencyIdB, history],\n  )\n\n  const handleDismissConfirmation = useCallback(() => {\n    setSignatureData(null) // important that we clear signature data to avoid bad sigs\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.LIQUIDITY_PERCENT, '0')\n    }\n    setTxHash('')\n  }, [onUserInput, txHash])\n\n  const [innerLiquidityPercentage, setInnerLiquidityPercentage] = useDebouncedChangeHandler(\n    Number.parseInt(parsedAmounts[Field.LIQUIDITY_PERCENT].toFixed(0)),\n    liquidityPercentChangeCallback,\n  )\n\n  const [onPresentRemoveLiquidity] = useModal(\n    <TransactionConfirmationModal\n      title={t('You will receive')}\n      customOnDismiss={handleDismissConfirmation}\n      attemptingTxn={attemptingTxn}\n      hash={txHash || ''}\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\n      pendingText={pendingText}\n    />,\n    true,\n    true,\n    'removeLiquidityModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader\n          backTo=\"/pool\"\n          title={t('Remove %assetA%-%assetB% liquidity', {\n            assetA: currencyA?.symbol ?? '',\n            assetB: currencyB?.symbol ?? '',\n          })}\n          subtitle={`To receive ${currencyA?.symbol} and ${currencyB?.symbol}`}\n          noConfig\n        />\n\n        <CardBody>\n          <AutoColumn gap=\"20px\">\n            <RowBetween>\n              <Text>{t('Amount')}</Text>\n              <Button variant=\"text\" scale=\"sm\" onClick={() => setShowDetailed(!showDetailed)}>\n                {showDetailed ? t('Simple') : t('Detailed')}\n              </Button>\n            </RowBetween>\n            {!showDetailed && (\n              <BorderCard>\n                <Text fontSize=\"40px\" bold mb=\"16px\" style={{ lineHeight: 1 }}>\n                  {formattedAmounts[Field.LIQUIDITY_PERCENT]}%\n                </Text>\n                <Slider\n                  name=\"lp-amount\"\n                  min={0}\n                  max={100}\n                  value={innerLiquidityPercentage}\n                  onValueChanged={(value) => setInnerLiquidityPercentage(Math.ceil(value))}\n                  mb=\"16px\"\n                />\n                <Flex flexWrap=\"wrap\" justifyContent=\"space-evenly\">\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '25')}>\n                    25%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '50')}>\n                    50%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '75')}>\n                    75%\n                  </Button>\n                  <Button variant=\"tertiary\" scale=\"sm\" onClick={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}>\n                    Max\n                  </Button>\n                </Flex>\n              </BorderCard>\n            )}\n          </AutoColumn>\n          {!showDetailed && (\n            <>\n              <ColumnCenter>\n                <ArrowDownIcon color=\"textSubtle\" width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <AutoColumn gap=\"10px\">\n                <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                  {t('You will receive')}\n                </Text>\n                <LightGreyCard>\n                  <Flex justifyContent=\"space-between\" mb=\"8px\">\n                    <Flex>\n                      <CurrencyLogo currency={currencyA} />\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokena-symbol\" ml=\"4px\">\n                        {currencyA?.symbol}\n                      </Text>\n                    </Flex>\n                    <Text small>{formattedAmounts[Field.CURRENCY_A] || '-'}</Text>\n                  </Flex>\n                  <Flex justifyContent=\"space-between\">\n                    <Flex>\n                      <CurrencyLogo currency={currencyB} />\n                      <Text small color=\"textSubtle\" id=\"remove-liquidity-tokenb-symbol\" ml=\"4px\">\n                        {currencyB?.symbol}\n                      </Text>\n                    </Flex>\n                    <Text small>{formattedAmounts[Field.CURRENCY_B] || '-'}</Text>\n                  </Flex>\n                  {chainId && (oneCurrencyIsWETH || oneCurrencyIsETH) ? (\n                    <RowBetween style={{ justifyContent: 'flex-end', fontSize: '14px' }}>\n                      {oneCurrencyIsETH ? (\n                        <StyledInternalLink\n                          to={`/remove/${currencyA === ETHER ? WETH[chainId].address : currencyIdA}/${\n                            currencyB === ETHER ? WETH[chainId].address : currencyIdB\n                          }`}\n                        >\n                          {t('Receive WBNB')}\n                        </StyledInternalLink>\n                      ) : oneCurrencyIsWETH ? (\n                        <StyledInternalLink\n                          to={`/remove/${currencyA && currencyEquals(currencyA, WETH[chainId]) ? 'BNB' : currencyIdA}/${\n                            currencyB && currencyEquals(currencyB, WETH[chainId]) ? 'BNB' : currencyIdB\n                          }`}\n                        >\n                          {t('Receive BNB')}\n                        </StyledInternalLink>\n                      ) : null}\n                    </RowBetween>\n                  ) : null}\n                </LightGreyCard>\n              </AutoColumn>\n            </>\n          )}\n\n          {showDetailed && (\n            <Box my=\"16px\">\n              <CurrencyInputPanel\n                value={formattedAmounts[Field.LIQUIDITY]}\n                onUserInput={onLiquidityInput}\n                onMax={() => {\n                  onUserInput(Field.LIQUIDITY_PERCENT, '100')\n                }}\n                showMaxButton={!atMaxAmount}\n                disableCurrencySelect\n                currency={pair?.liquidityToken}\n                pair={pair}\n                id=\"liquidity-amount\"\n                onCurrencySelect={() => null}\n              />\n              <ColumnCenter>\n                <ArrowDownIcon width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                hideBalance\n                value={formattedAmounts[Field.CURRENCY_A]}\n                onUserInput={onCurrencyAInput}\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                showMaxButton={!atMaxAmount}\n                currency={currencyA}\n                label={t('Output')}\n                onCurrencySelect={handleSelectCurrencyA}\n                id=\"remove-liquidity-tokena\"\n              />\n              <ColumnCenter>\n                <AddIcon width=\"24px\" my=\"16px\" />\n              </ColumnCenter>\n              <CurrencyInputPanel\n                hideBalance\n                value={formattedAmounts[Field.CURRENCY_B]}\n                onUserInput={onCurrencyBInput}\n                onMax={() => onUserInput(Field.LIQUIDITY_PERCENT, '100')}\n                showMaxButton={!atMaxAmount}\n                currency={currencyB}\n                label={t('Output')}\n                onCurrencySelect={handleSelectCurrencyB}\n                id=\"remove-liquidity-tokenb\"\n              />\n            </Box>\n          )}\n          {pair && (\n            <AutoColumn gap=\"10px\" style={{ marginTop: '16px' }}>\n              <Text bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                {t('Prices')}\n              </Text>\n              <LightGreyCard>\n                <Flex justifyContent=\"space-between\">\n                  <Text small color=\"textSubtle\">\n                    1 {currencyA?.symbol} =\n                  </Text>\n                  <Text small>\n                    {tokenA ? pair.priceOf(tokenA).toSignificant(6) : '-'} {currencyB?.symbol}\n                  </Text>\n                </Flex>\n                <Flex justifyContent=\"space-between\">\n                  <Text small color=\"textSubtle\">\n                    1 {currencyB?.symbol} =\n                  </Text>\n                  <Text small>\n                    {tokenB ? pair.priceOf(tokenB).toSignificant(6) : '-'} {currencyA?.symbol}\n                  </Text>\n                </Flex>\n              </LightGreyCard>\n            </AutoColumn>\n          )}\n          <Box position=\"relative\" mt=\"16px\">\n            {!account ? (\n              <UnlockButton />\n            ) : (\n              <RowBetween>\n                <Button\n                  variant={approval === ApprovalState.APPROVED || signatureData !== null ? 'success' : 'primary'}\n                  onClick={onAttemptToApprove}\n                  disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\n                  width=\"100%\"\n                  mr=\"0.5rem\"\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <Dots>{t('Approving')}</Dots>\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\n                    t('Approved')\n                  ) : (\n                    t('Approve')\n                  )}\n                </Button>\n                <Button\n                  variant={\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\n                      ? 'danger'\n                      : 'primary'\n                  }\n                  onClick={() => {\n                    onPresentRemoveLiquidity()\n                  }}\n                  width=\"100%\"\n                  disabled={!isValid || (signatureData === null && approval !== ApprovalState.APPROVED)}\n                >\n                  {error || t('Remove')}\n                </Button>\n              </RowBetween>\n            )}\n          </Box>\n        </CardBody>\n      </AppBody>\n\n      {pair ? (\n        <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\n        </AutoColumn>\n      ) : null}\n    </Page>\n  )\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\n\n/**\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\n * @param value value that is rapidly changing\n * @param onChange change handler that should receive the debounced updates to the value\n * @param debouncedMs how long we should wait for changes to be applied\n */\nexport default function useDebouncedChangeHandler<T>(\n  value: T,\n  onChange: (newValue: T) => void,\n  debouncedMs = 100,\n): [T, (value: T) => void] {\n  const [inner, setInner] = useState<T>(() => value)\n  const timer = useRef<ReturnType<typeof setTimeout>>()\n\n  const onChangeInner = useCallback(\n    (newValue: T) => {\n      setInner(newValue)\n      if (timer.current) {\n        clearTimeout(timer.current)\n      }\n      timer.current = setTimeout(() => {\n        onChange(newValue)\n        timer.current = undefined\n      }, debouncedMs)\n    },\n    [debouncedMs, onChange],\n  )\n\n  useEffect(() => {\n    if (timer.current) {\n      clearTimeout(timer.current)\n      timer.current = undefined\n    }\n    setInner(value)\n  }, [value])\n\n  return [inner, onChangeInner]\n}\n","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\n// An internal link from the react-router-dom library that is correctly styled\nconst StyledInternalLink = styled(Link)`\n  text-decoration: none;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary};\n  font-weight: 500;\n\n  :hover {\n    text-decoration: underline;\n  }\n\n  :focus {\n    outline: none;\n    text-decoration: underline;\n  }\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nexport default StyledInternalLink\n"],"sourceRoot":""}