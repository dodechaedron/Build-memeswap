{"version":3,"sources":["views/Launchpad/detail.tsx","state/launchpad/hooks.ts"],"names":["PromotedGradient","keyframes","StyledPage","styled","div","Wrapper","CardHeader","_ref","background","_ref2","theme","radii","card","StyledCard","Card","_ref3","isFinished","colors","_ref4","isPromoted","css","primaryBright","secondary","props","_ref5","isDesktop","StyledCardInner","Box","_ref6","_ref7","ProjectLauchpad","_ref8","match","params","projectId","t","useTranslation","account","useWeb3React","launchpads","useLaunchpads","launchpad","filter","parseInt","currencyBalances","currencies","parsedAmount","useDerivedLaunchpadInfo","onCurrencySelection","onUserInput","useLaunchpadActionHandlers","typedValue","useLaunchpadState","maxAmountInput","maxAmountSpend","Field","INPUT","atMaxAmountInput","Boolean","equalTo","handleTypeInput","useCallback","value","handleMaxInput","toExact","handleInputSelect","inputCurrency","_jsxs","_Fragment","children","_jsx","PageHeader","Flex","justifyContent","flexDirection","alignItems","IconButton","as","Link","to","ArrowBackIcon","width","flex","mr","Heading","scale","color","mb","projectTitle","Text","fontWeight","fontSize","lineHeight","projectTagline","Page","status","ribbon","CardRibbon","variantColor","text","projectBannerUrl","CardBody","CurrencyInputPanel","label","showMaxButton","currency","onMax","onCurrencySelect","id","Button","disabled","variant","textTransform","bold","UnlockButton","amount","symbol","supportedCoin","price","startBlock","mt","textAlign","projectDescription","LinkExternal","href","projectWebsiteUrl","small","useSelector","state","dispatch","useDispatch","field","selectCurrency","currencyId","Token","address","ETHER","onSwitchTokens","switchCurrencies","typeInput","onChangeRecipient","recipient","setRecipient","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","pairs","pair","liquidityToken","useActiveWeb3React","independentField","inputCurrencyId","OUTPUT","outputCurrencyId","useCurrency","outputCurrency","recipientLookup","useENS","undefined","relevantTokenBalances","useCurrencyBalances","isExactIn","typedValueParsed","parseUnits","decimals","toString","TokenAmount","JSBI","BigInt","CurrencyAmount","ether","error","console","debug","tryParseAmount","bestTradeExactIn","useTradeExactIn","bestTradeExactOut","useTradeExactOut","v2Trade","inputError","_inputError","_inputError2","formattedTo","isAddress","_inputError3","indexOf","_inputError4","allowedSlippage","useUserSlippageTolerance","slippageAdjustedAmounts","computeSlippageAdjustedAmounts","balanceIn","amountIn","lessThan","fastRefresh","useRefresh","useAppDispatch","useEffect","fetchLaunchpadsUserDataAsync","userDataLoaded","data"],"mappings":"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","file":"static/js/23.644b53f4.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\nimport { Link, RouteComponentProps } from 'react-router-dom'\nimport styled, { css, keyframes } from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Heading, Flex, CardHeader, Text,  Card, Box, CardRibbon, CardBody, LinkExternal, IconButton, ArrowBackIcon,  } from 'components/_uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { useLaunchpads , useDerivedLaunchpadInfo, useLaunchpadActionHandlers, useLaunchpadState} from 'state/launchpad/hooks'\nimport Page from 'components/Layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\nimport { CurrencyAmount } from 'utils/@sdk'\nimport { Field } from 'state/launchpad/actions'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\ninterface PromotedStyleCardProps {\n  isDesktop: boolean\n}\nconst StyledPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({background}) =>  `url(${background})`};\n  background-size: cover;\n  background-repeat: no-repeat;\n  height: 130px;\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst StyledCard = styled(Card)<{ isPromoted?: PromotedStyleCardProps; isFinished?: boolean }>`\n  width: 50%;\n  max-width: 500px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n\n  ${({ isPromoted, theme }) =>\n    isPromoted\n      ? css`\n          background: linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary});\n          padding: 1px 1px 3px 1px;\n          background-size: 400% 400%;\n        `\n      : `background: ${(props) => props.theme.card.background};`}\n\n  ${({ isPromoted }) =>\n    isPromoted &&\n    isPromoted.isDesktop &&\n    css`\n      animation: ${PromotedGradient} 3s ease infinite;\n    `}\n`\n\nconst StyledCardInner = styled(Box)`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n`\nexport default function ProjectLauchpad({\n  match: {\n    params: { projectId },\n  },\n}: RouteComponentProps<{ projectId: string }>) {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { launchpads } = useLaunchpads(account)\n\n  const launchpad = launchpads.filter((launchpad) => launchpad.projectId === parseInt(projectId) )[0]\n\n  const { currencyBalances, currencies, parsedAmount } = useDerivedLaunchpadInfo()\n  const { onCurrencySelection, onUserInput } = useLaunchpadActionHandlers()\n  const { typedValue } = useLaunchpadState()\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmount?.equalTo(maxAmountInput))\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput],\n  )\n\n  const handleMaxInput = useCallback(() => {\n    if (maxAmountInput) {\n      onUserInput(Field.INPUT, maxAmountInput.toExact())\n    }\n  }, [maxAmountInput, onUserInput])\n\n  const handleInputSelect = useCallback(\n    (inputCurrency) => {\n      onCurrencySelection(Field.INPUT, inputCurrency)\n    },\n    [onCurrencySelection],\n  )\n\n  return (\n    <>\n      <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>          \n            <Flex alignItems=\"center\">\n              <IconButton as={Link} to=\"/launchpads\">\n                <ArrowBackIcon width=\"32px\" />\n              </IconButton>\n              <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\n                <Heading as=\"h1\" scale=\"xl\" color=\"primary\" mb=\"24px\">\n                  {launchpad.projectTitle}\n                </Heading>\n              <Text color=\"text\" fontWeight=\"400\" fontSize=\"24px\" lineHeight=\"24px\">\n                {launchpad.projectTagline}\n              </Text>\n            </Flex>\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>        \n        <StyledPage>\n          <StyledCard\n                isFinished={launchpad.status === 'ended'}\n                ribbon={<CardRibbon variantColor={launchpad.status === 'ended'? \"textSubtle\" : \"secondary\"} text={launchpad.status} />}\n              >\n                <StyledCardInner>\n                  <Wrapper isFinished={false} background={launchpad.projectBannerUrl}/>\n                  <CardBody>\n                    <Flex mb=\"24px\" flexDirection=\"column\">\n                      <CurrencyInputPanel\n                        label={t('Amount')}\n                        value={typedValue}\n                        showMaxButton={!atMaxAmountInput}\n                        currency={currencies[Field.INPUT]}\n                        onUserInput={handleTypeInput}\n                        onMax={handleMaxInput}\n                        onCurrencySelect={handleInputSelect}\n                        id=\"launchpad-currency-input\"\n                      />\n                    </Flex>\n                    {account ? (\n                      <Button\n                        disabled={!(parseInt(typedValue) > 0) || !(currencies[Field.INPUT])}\n                        variant=\"primary\"\n                        width=\"100%\"\n                        mb=\"24px\"\n                      >\n                        {parseInt(typedValue) > 0 ? (currencies[Field.INPUT]) ? t('Participate') : t('Select a token') : t('Enter an amount')}\n                      </Button>\n                    ) : (\n                      <>\n                        <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                          {t('Participate')}\n                        </Text>\n                        <UnlockButton />\n                      </>\n                    )}\n                    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                      <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"16px\">\n                        {t('Amount :')}\n                      </Text>\n                      <Text color=\"secondary\" fontWeight=\"800\" fontSize=\"16px\" lineHeight=\"16px\">\n                        {launchpad.amount}{launchpad.symbol}\n                      </Text>\n                    </Flex>\n                    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                      <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"16px\">\n                        {t('Time :')}\n                      </Text>\n                      <Text color=\"secondary\" fontWeight=\"800\" fontSize=\"16px\" lineHeight=\"16px\">\n                        {t('0 (07.19 7:00 UTC)')}\n                      </Text>\n                    </Flex>\n                    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                      <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"16px\">\n                        {t('Supported Coin:')}\n                      </Text>\n                      <Text color=\"secondary\" fontWeight=\"800\" fontSize=\"16px\" lineHeight=\"16px\">\n                        {launchpad.supportedCoin[0]}\n                      </Text>\n                    </Flex>\n                    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                      <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"16px\">\n                        {t('Price:')}\n                      </Text>\n                      <Text color=\"secondary\" fontWeight=\"800\" fontSize=\"16px\" lineHeight=\"16px\">\n                        {launchpad.price}{launchpad.supportedCoin[0]}\n                      </Text>\n                    </Flex>\n                    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                      <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"16px\">\n                        {t('Start Block:')}\n                      </Text>\n                      <Text color=\"secondary\" fontWeight=\"800\" fontSize=\"16px\" lineHeight=\"16px\">\n                        {launchpad.startBlock}\n                      </Text>\n                    </Flex>\n                    <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"16px\">\n                      <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"16px\" textAlign=\"justify\" mb=\"16px\">\n                      {launchpad.projectDescription}\n                      </Text>\n                    </Flex>\n                    <Flex mb=\"2px\" justifyContent=\"flex-end\" mt=\"16px\">\n                      <LinkExternal href={launchpad.projectWebsiteUrl} bold={false} small>\n                        {t('View Project Site')}\n                      </LinkExternal>\n                    </Flex>\n                  </CardBody>\n                </StyledCardInner>\n              </StyledCard>\n          </StyledPage>\n      </Page>\n    </>\n  )\n}\n","import { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from 'utils/@sdk'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useENS from 'hooks/ENS/useENS'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { isAddress } from 'utils'\nimport { computeSlippageAdjustedAmounts } from 'utils/prices'\nimport { Launchpad, State } from 'state/types'\nimport useRefresh from 'hooks/useRefresh'\nimport { AppDispatch, AppState, useAppDispatch } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceLaunchpadState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { LaunchpadState } from './reducer'\nimport { useUserSlippageTolerance } from '../user/hooks'\nimport { fetchLaunchpadsUserDataAsync } from '.'\n\nexport function useLaunchpadState(): AppState['launchpad'] {\n  return useSelector<AppState, AppState['launchpad']>((state) => state.launchpad)\n}\n\nexport function useLaunchpadActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'BNB' : '',\n        }),\n      )\n    },\n    [dispatch],\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\n]\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\n  )\n}\n\n// from the current launchpad inputs, compute the best trade and return it.\nexport function useDerivedLaunchpadInfo(): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmount: CurrencyAmount | undefined\n  v2Trade: Trade | undefined\n  inputError?: string\n} {\n  const { account } = useActiveWeb3React()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useLaunchpadState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = 'Connect Wallet'\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? 'Enter an amount'\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? 'Select a token'\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? 'Enter a recipient'\n  } else if (\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\n    (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\n    (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\n  ) {\n    inputError = inputError ?? 'Invalid recipient'\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = `Insufficient ${amountIn.currency.symbol} balance`\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB'\n    if (valid === false) return 'BNB'\n  }\n  return 'BNB' ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToLaunchpadState(parsedQs: ParsedQs): LaunchpadState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n  }\n}\n\n// updates the launchpad state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToLaunchpadState(parsedQs)\n\n    dispatch(\n      replaceLaunchpadState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: null,\n      }),\n    )\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n\n  return result\n}\n\nexport const useLaunchpads = (account): { launchpads: Launchpad[]; userDataLoaded: boolean } => {  \n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchLaunchpadsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n\n  const { launchpads, userDataLoaded } = useSelector((state: State) => ({\n    launchpads: state.launchpad.data,\n    userDataLoaded: state.launchpad.userDataLoaded,\n  }))\n  return { launchpads, userDataLoaded }\n}"],"sourceRoot":""}