{"version":3,"sources":["views/Launchpad/components/StyledCard.tsx","views/Launchpad/components/ProjectCard.tsx","views/Launchpad/index.tsx","state/launchpad/hooks.ts"],"names":["PromotedGradient","keyframes","StyledCard","styled","Card","_ref","isFinished","theme","colors","_ref2","isPromoted","css","primaryBright","secondary","props","card","background","_ref3","isDesktop","_ref4","mediaQueries","sm","StyledCardInner","Box","_ref5","_ref6","radii","Wrapper","CardHeader","ProjectCard","launchpad","account","projectId","projectTitle","projectTagline","projectBannerUrl","symbol","amount","status","t","useTranslation","_jsx","ribbon","CardRibbon","variantColor","text","children","_jsxs","CardBody","Flex","alignItems","justifyContent","flexDirection","Heading","color","scale","Text","mt","mb","fontWeight","fontSize","lineHeight","Button","as","Link","to","variant","width","_Fragment","textTransform","bold","UnlockButton","CardLayout","FlexLayout","LaunchpadControls","md","SearchSortContainer","ControlStretch","Launchpads","useWeb3React","launchpads","useLaunchpads","numberOfLaunchpadsVisible","setNumberOfLaunchpadsVisible","useState","observerIsSet","setObserverIsSet","loadMoreRef","useRef","searchQuery","setSearchQuery","sortOption","setSortOption","useEffect","IntersectionObserver","entries","entry","isIntersecting","launchpadsCurrentlyVisible","rootMargin","threshold","observe","current","PageHeader","flex","mr","Page","Select","options","label","value","onChange","option","SearchInput","event","target","placeholder","launchpadsToShow","_launchpad","lowercaseQuery","toLowerCase","filter","includes","launchpadsToSort","orderBy","sortLaunchpads","slice","map","ref","Image","mx","src","alt","height","useLaunchpadState","useSelector","state","useLaunchpadActionHandlers","dispatch","useDispatch","onCurrencySelection","useCallback","field","currency","selectCurrency","currencyId","Token","address","ETHER","onSwitchTokens","switchCurrencies","onUserInput","typedValue","typeInput","onChangeRecipient","recipient","setRecipient","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","pairs","pair","liquidityToken","useDerivedLaunchpadInfo","useActiveWeb3React","independentField","Field","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","useCurrency","outputCurrency","recipientLookup","useENS","undefined","relevantTokenBalances","useCurrencyBalances","isExactIn","parsedAmount","typedValueParsed","parseUnits","decimals","toString","TokenAmount","JSBI","BigInt","CurrencyAmount","ether","error","console","debug","tryParseAmount","bestTradeExactIn","useTradeExactIn","bestTradeExactOut","useTradeExactOut","v2Trade","currencyBalances","currencies","inputError","_inputError","_inputError2","formattedTo","isAddress","_inputError3","indexOf","_inputError4","allowedSlippage","useUserSlippageTolerance","slippageAdjustedAmounts","computeSlippageAdjustedAmounts","balanceIn","amountIn","lessThan","fastRefresh","useRefresh","useAppDispatch","fetchLaunchpadsUserDataAsync","userDataLoaded","data"],"mappings":"uQAGA,MAAMA,EAAmBC,GAAS;;;;;;;;;;EAgBrBC,EAAaC,YAAOC,IAAoE;;;;;;;WAO1FC,IAAA,IAAC,WAAEC,EAAU,MAAEC,GAAOF,EAAA,OAAKE,EAAMC,OAAOF,EAAa,eAAiB;;;IAG7EG,IAAA,IAAC,WAAEC,EAAU,MAAEH,GAAOE,EAAA,OACtBC,EACIC,GAAG;gDACqCJ,EAAMC,OAAOI,kBAAkBL,EAAMC,OAAOK;;;UAIpF,eAAgBC,GAAUA,EAAMP,MAAMQ,KAAKC;;IAE/CC,IAAA,IAAC,WAAEP,GAAYO,EAAA,OACfP,GACAA,EAAWQ,WACXP,GAAG;mBACYX;;;IAGfmB,IAAA,IAAC,MAAEZ,GAAOY,EAAA,OAAKZ,EAAMa,aAAaC;;;EAKzBC,EAAkBnB,YAAOoB,IAAI;gBAC1BC,IAAA,IAAC,MAAEjB,GAAOiB,EAAA,OAAKjB,EAAMQ,KAAKC;mBACvBS,IAAA,IAAC,MAAElB,GAAOkB,EAAA,OAAKlB,EAAMmB,MAAMX;EAG/Bb,I,OC9Cf,MAAMyB,EAAUxB,YAAOyB,IAA0D;gBACjEvB,IAAA,IAAC,WAACW,GAAWX,EAAA,MAAM,OAAOW;;;;mBAIvBP,IAAA,IAAC,MAAEF,GAAOE,EAAA,MAAK,GAAGF,EAAMmB,MAAMX,QAAQR,EAAMmB,MAAMX;EA+DtDc,MA7D0DZ,IAA6B,IAA5B,UAAEa,EAAS,QAAEC,GAASd,EAC9F,MAAM,UAAEe,EAAS,aAAEC,EAAY,eAAEC,EAAc,iBAAEC,EAAgB,OAAEC,EAAM,OAAEC,EAAM,OAAEC,GAAWR,GACxF,EAAES,GAAMC,cACd,OACEC,cAACvC,EAAU,CACTI,WAAuB,UAAXgC,EACZI,OAAQD,cAACE,IAAU,CAACC,aAAyB,UAAXN,EAAoB,aAAe,YAAaO,KAAMP,IAAWQ,SAEnGC,eAACzB,EAAe,CAAAwB,SAAA,CACdL,cAACd,EAAO,CAACrB,YAAY,EAAOU,WAAYmB,IACxCY,eAACC,IAAQ,CAAAF,SAAA,CACPL,cAACQ,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAeL,SACtDC,eAACE,IAAI,CAACG,cAAc,SAAQN,SAAA,CAC1BL,cAACY,IAAO,CAACC,MAAM,UAAUC,MAAM,KAAIT,SAChCb,IAEHQ,cAACe,KAAI,CAACF,MAAM,OAAMG,GAAG,MAAMC,GAAG,MAAKZ,SAAEZ,SAGzCa,eAACE,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAeL,SAAA,CACtDL,cAACe,KAAI,CAACF,MAAM,aAAaK,WAAW,MAAMC,SAAS,OAAOC,WAAW,OAAMf,SACxEP,EAAE,cAELQ,eAACS,KAAI,CAACF,MAAM,YAAYK,WAAW,MAAMC,SAAS,OAAOC,WAAW,OAAMf,SAAA,CACvET,EAAQD,QAGbW,eAACE,IAAI,CAACC,WAAW,SAASC,eAAe,gBAAeL,SAAA,CACtDL,cAACe,KAAI,CAACF,MAAM,aAAaK,WAAW,MAAMC,SAAS,OAAOC,WAAW,OAAMf,SACxEP,EAAE,YAELE,cAACe,KAAI,CAACF,MAAM,YAAYK,WAAW,MAAMC,SAAS,OAAOC,WAAW,OAAMf,SACvEP,EAAE,2BAGPE,cAACQ,IAAI,CAACQ,GAAG,OAAOL,cAAc,SAAQN,SACnCf,EACCU,cAACqB,IAAM,CACLC,GAAIC,IACJC,GAAI,cAAcjC,IAClBkC,QAAQ,UACRC,MAAM,OACNT,GAAG,MAAKZ,SAEPP,EAAE,iBAGLQ,eAAAqB,WAAA,CAAAtB,SAAA,CACEL,cAACe,KAAI,CAACE,GAAG,OAAOW,cAAc,YAAYT,SAAS,OAAON,MAAM,aAAagB,MAAI,EAAAxB,SAC9EP,EAAE,iBAELE,cAAC8B,IAAY,kBCpD7B,MAAMC,EAAarE,YAAOsE,IAAW;;EAI/BC,EAAoBvE,YAAO8C,IAAK;;;IAGlC5C,IAAA,IAAC,MAAEE,GAAOF,EAAA,OAAKE,EAAMa,aAAauD;;;EAKhCC,EAAsBzE,YAAO8C,IAAK;;;EAKlC4B,EAAiB1E,YAAO8C,IAAK;;;;EAsIpB6B,UA9HcA,KAC3B,MAAM,EAAEvC,GAAMC,eACR,QAAET,GAAYgD,eACd,WAAEC,GAAeC,YAAclD,IAC9BmD,EAA2BC,GAAgCC,mBAN/B,KAO5BC,EAAeC,GAAoBF,oBAAS,GAC7CG,EAAcC,iBAAuB,OACpCC,EAAaC,GAAkBN,mBAAS,KACxCO,EAAYC,GAAiBR,mBAAS,OAE7CS,qBAAU,KAQR,IAAKR,EAAe,CACO,IAAIS,sBARHC,IAC1B,MAAOC,GAASD,EACZC,EAAMC,gBACRd,GAA8Be,GAA+BA,EAhBhC,OAqBuC,CACpEC,WAAY,MACZC,UAAW,IAEIC,QAAQd,EAAYe,SACrChB,GAAiB,MAElB,CAACD,IAmCJ,OACEtC,eAAAqB,WAAA,CAAAtB,SAAA,CACEL,cAAC8D,IAAU,CAAAzD,SACTL,cAACQ,IAAI,CAACE,eAAe,gBAAgBC,cAAe,CAAC,SAAU,KAAM,KAAM,OAAON,SAChFC,eAACE,IAAI,CAACuD,KAAK,IAAIpD,cAAc,SAASqD,GAAI,CAAC,MAAO,GAAG3D,SAAA,CACnDL,cAACY,IAAO,CAACU,GAAG,KAAKR,MAAM,KAAKD,MAAM,UAAUI,GAAG,OAAMZ,SAClDP,EAAE,cAELE,cAACe,KAAI,CAACF,MAAM,OAAOK,WAAW,MAAMC,SAAS,OAAOC,WAAW,OAAMf,SACpEP,EAAE,wCAKTQ,eAAC2D,IAAI,CAAA5D,SAAA,CACHL,cAACiC,EAAiB,CAACvB,eAAe,WAAUL,SAC1CC,eAAC6B,EAAmB,CAAA9B,SAAA,CAClBC,eAACE,IAAI,CAACG,cAAc,SAASe,MAAM,MAAKrB,SAAA,CACtCL,cAACe,KAAI,CAACI,SAAS,OAAOU,MAAI,EAAChB,MAAM,aAAae,cAAc,YAAWvB,SACpEP,EAAE,aAELE,cAACoC,EAAc,CAAA/B,SACbL,cAACkE,IAAM,CACLC,QAAS,CACP,CACEC,MAAOtE,EAAE,OACTuE,MAAO,OAET,CACED,MAAOtE,EAAE,UACTuE,MAAO,WAGXC,SA9DgBC,IAC9BpB,EAAcoB,EAAOF,eAiEb/D,eAACE,IAAI,CAACG,cAAc,SAASe,MAAM,MAAKrB,SAAA,CACtCL,cAACe,KAAI,CAACI,SAAS,OAAOU,MAAI,EAAChB,MAAM,aAAae,cAAc,YAAWvB,SACpEP,EAAE,YAELE,cAACoC,EAAc,CAAA/B,SACbL,cAACwE,IAAW,CAACF,SA3EMG,IAC/BxB,EAAewB,EAAMC,OAAOL,QA0EgCM,YAAY,gCAKpE3E,cAAC+B,EAAU,CAAA1B,SA1DQuE,MACvB,IAAIC,EAAa,GAEjB,GADAA,EAAatC,EACTS,EAAa,CACf,MAAM8B,EAAiB9B,EAAY+B,cACnCF,EAAatC,EAAWyC,QAAQ3F,GAAcA,EAAUG,aAAauF,cAAcE,SAASH,KAG9F,MAtBsBI,KACtB,OAAQhC,GACN,IAAK,SAEH,OAAOiC,IACLD,GACC7F,GAA0BA,EAAUO,QACrC,QAEJ,QACE,OAAOsF,IAYJE,CAAeP,GAAYQ,MAAM,EAAG5C,IAmDpCmC,GAAmBU,KAAKjG,GAAcW,cAACZ,EAAW,CAA2BC,UAAWA,EAAWC,QAASA,GAApDD,EAAUE,eAGrES,cAAA,OAAKuF,IAAKzC,IACV9C,cAACwF,IAAK,CACJC,GAAG,OACHzE,GAAG,OACH0E,IAAI,2CACJC,IAAI,uBACJjE,MAAO,IACPkE,OAAQ,gB,iCC/JlB,wRAqBO,SAASC,IACd,OAAOC,aAA8CC,GAAUA,EAAM1G,YAGhE,SAAS2G,IAMd,MAAMC,EAAWC,cACXC,EAAsBC,uBAC1B,CAACC,EAAcC,KACbL,EACEM,YAAe,CACbF,QACAG,WAAYF,aAAoBG,IAAQH,EAASI,QAAUJ,IAAaK,IAAQ,MAAQ,QAI9F,CAACV,IAqBH,MAAO,CACLW,eAnBqBR,uBAAY,KACjCH,EAASY,iBACR,CAACZ,IAkBFE,sBACAW,YAjBkBV,uBAClB,CAACC,EAAcU,KACbd,EAASe,YAAU,CAAEX,QAAOU,kBAE9B,CAACd,IAcDgB,kBAXwBb,uBACvBc,IACCjB,EAASkB,YAAa,CAAED,iBAE1B,CAACjB,KA+BL,MAAMmB,EAAoC,CACxC,6CACA,6CACA,8CAQF,SAASC,EAAgBC,EAAcC,GACrC,OACED,EAAME,MAAMC,KAAKC,MAAMC,GAAUA,EAAMjB,UAAYa,KACnDD,EAAME,MAAMI,MAAMF,MAAMG,GAASA,EAAKC,eAAepB,UAAYa,IAK9D,SAASQ,IAMb,IAADnK,EAAAI,EACA,MAAM,QAAEsB,GAAY0I,eAEd,iBACJC,EAAgB,WAChBlB,EACA,CAACmB,IAAMC,QAAU3B,WAAY4B,GAC7B,CAACF,IAAMG,SAAW7B,WAAY8B,GAAkB,UAChDpB,GACErB,IAEE0C,EAAgBC,YAAYJ,GAC5BK,EAAiBD,YAAYF,GAC7BI,EAAkBC,YAAgB,OAATzB,QAAS,IAATA,SAAa0B,GACtCpH,EAA2E,QAA1D5D,EAAkB,OAAdsJ,EAAqB5H,EAAUoJ,EAAgBhC,eAAO,IAAA9I,IAAK,KAEhFiL,EAAwBC,YAA2B,OAAPxJ,QAAO,IAAPA,SAAWsJ,EAAW,CACzD,OAAbL,QAAa,IAAbA,SAAiBK,EACH,OAAdH,QAAc,IAAdA,SAAkBG,IAGdG,EAAqBd,IAAqBC,IAAMC,MAChDa,EAlED,SAAwB3E,EAAgBiC,GAC7C,GAAKjC,GAAUiC,EAGf,IACE,MAAM2C,EAAmBC,qBAAW7E,EAAOiC,EAAS6C,UAAUC,WAC9D,GAAyB,MAArBH,EACF,OAAO3C,aAAoBG,IACvB,IAAI4C,IAAY/C,EAAUgD,IAAKC,OAAON,IACtCO,IAAeC,MAAMH,IAAKC,OAAON,IAEvC,MAAOS,GAEPC,QAAQC,MAAM,kCAAkCvF,KAAUqF,IAqDvCG,CAAe9C,EAAuD,QAA7C/I,EAAG+K,EAAYR,EAAgBE,SAAc,IAAAzK,SAAK4K,GAE1FkB,EAAmBC,YAAgBhB,EAAYC,OAAeJ,EAAyB,OAAdH,QAAc,IAAdA,SAAkBG,GAC3FoB,EAAoBC,YAA8B,OAAb1B,QAAa,IAAbA,SAAiBK,EAAYG,OAA2BH,EAAfI,GAE9EkB,EAAUnB,EAAYe,EAAmBE,EAEzCG,EAAmB,CACvB,CAACjC,IAAMC,OAAQU,EAAsB,GACrC,CAACX,IAAMG,QAASQ,EAAsB,IAGlCuB,EAA8C,CAClD,CAAClC,IAAMC,OAAqB,OAAbI,QAAa,IAAbA,SAAiBK,EAChC,CAACV,IAAMG,QAAuB,OAAdI,QAAc,IAAdA,SAAkBG,GAGpC,IAAIyB,EAKgB,IAADC,EAIwCC,GARtDjL,IACH+K,EAAa,kBAGVrB,KACHqB,EAAuB,QAAbC,EAAGD,SAAU,IAAAC,IAAI,mBAGxBF,EAAWlC,IAAMC,QAAWiC,EAAWlC,IAAMG,UAChDgC,EAAuB,QAAbE,EAAGF,SAAU,IAAAE,IAAI,kBAG7B,MAAMC,EAAcC,YAAUjJ,GACJ,IAADkJ,EAAzB,GAAKlJ,GAAOgJ,GAEL,IAC6C,IAAlDpD,EAAwBuD,QAAQH,IAC/BV,GAAoBzC,EAAgByC,EAAkBU,IACtDR,GAAqB3C,EAAgB2C,EAAmBQ,GACzD,CAAC,IAADI,EACAP,EAAuB,QAAbO,EAAGP,SAAU,IAAAO,IAAI,0BAN3BP,EAAuB,QAAbK,EAAGL,SAAU,IAAAK,IAAI,oBAS7B,MAAOG,GAAmBC,cAEpBC,EAA0Bb,GAAWW,GAAmBG,YAA+Bd,EAASW,IAG/FI,EAAWC,GAAY,CAC5Bf,EAAiBjC,IAAMC,OACvB4C,EAA0BA,EAAwB7C,IAAMC,OAAS,MAOnE,OAJI8C,GAAaC,GAAYD,EAAUE,SAASD,KAC9Cb,EAAa,gBAAgBa,EAAS5E,SAAS3G,kBAG1C,CACLyK,aACAD,mBACAnB,eACAkB,QAAgB,OAAPA,QAAO,IAAPA,SAAWtB,EACpByB,cA4FG,MAAM7H,EAAiBlD,IAC5B,MAAM,YAAE8L,GAAgBC,cAClBpF,EAAWqF,cACjBlI,qBAAU,KACJ9D,GACF2G,EAASsF,YAA6BjM,MAEvC,CAACA,EAAS2G,EAAUmF,IAGvB,MAAM,WAAE7I,EAAU,eAAEiJ,GAAmB1F,aAAaC,IAAY,CAC9DxD,WAAYwD,EAAM1G,UAAUoM,KAC5BD,eAAgBzF,EAAM1G,UAAUmM,mBAElC,MAAO,CAAEjJ,aAAYiJ","file":"static/js/24.45d8e4f5.chunk.js","sourcesContent":["import styled, { css, keyframes } from 'styled-components'\nimport { Card, Box } from 'components/_uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\ninterface PromotedStyleCardProps {\n  isDesktop: boolean\n}\n\nexport const StyledCard = styled(Card)<{ isPromoted?: PromotedStyleCardProps; isFinished?: boolean }>`\n  max-width: 352px;\n  margin: 0 8px 24px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n\n  ${({ isPromoted, theme }) =>\n    isPromoted\n      ? css`\n          background: linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary});\n          padding: 1px 1px 3px 1px;\n          background-size: 400% 400%;\n        `\n      : `background: ${(props) => props.theme.card.background};`}\n\n  ${({ isPromoted }) =>\n    isPromoted &&\n    isPromoted.isDesktop &&\n    css`\n      animation: ${PromotedGradient} 3s ease infinite;\n    `}\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled(Box)`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { CardHeader, CardBody, Flex, Text, CardRibbon, Heading, Button } from 'components/_uikit'\nimport styled from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { Launchpad } from 'state/types'\nimport { StyledCard, StyledCardInner } from './StyledCard'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({background}) =>  `url(${background})`};\n  background-size: cover;\n  background-repeat: no-repeat;\n  height: 90px;\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\nconst ProjectCard: React.FC<{ launchpad: Launchpad; account: string }> = ({ launchpad, account }) => {\n  const { projectId, projectTitle, projectTagline, projectBannerUrl, symbol, amount, status } = launchpad\n  const { t } = useTranslation()\n  return (\n    <StyledCard\n      isFinished={status === 'ended'}\n      ribbon={<CardRibbon variantColor={status === 'ended'? \"textSubtle\" : \"secondary\"} text={status} />}\n    >\n      <StyledCardInner>\n        <Wrapper isFinished={false} background={projectBannerUrl}/>\n        <CardBody>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <Flex flexDirection=\"column\">\n              <Heading color='primary' scale=\"lg\">\n                {projectTitle}\n              </Heading>\n              <Text color='text'mt=\"8px\" mb=\"8px\">{projectTagline}</Text>\n            </Flex>\n          </Flex>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"16px\">\n              {t('Amount :')}\n            </Text>\n            <Text color=\"secondary\" fontWeight=\"800\" fontSize=\"16px\" lineHeight=\"16px\">\n              {amount}{symbol}\n            </Text>\n          </Flex>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"16px\">\n              {t('Time :')}\n            </Text>\n            <Text color=\"secondary\" fontWeight=\"800\" fontSize=\"16px\" lineHeight=\"16px\">\n              {t('0 (07.19 7:00 UTC)')}\n            </Text>\n          </Flex>\n          <Flex mt=\"24px\" flexDirection=\"column\">\n            {account ? (\n              <Button\n                as={Link}\n                to={`/launchpad/${projectId}`}\n                variant=\"primary\"\n                width=\"100%\"\n                mb=\"8px\"\n              >\n                {t('Participate')}\n              </Button>\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Participate')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </CardBody>\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default ProjectCard\n","import React, { useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image, Text } from 'components/_uikit'\nimport orderBy from 'lodash/orderBy'\nimport { useTranslation } from 'contexts/Localization'\nimport { useLaunchpads } from 'state/launchpad/hooks'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { Launchpad } from 'state/types'\nimport ProjectCard from './components/ProjectCard'\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n`\n\nconst LaunchpadControls = styled(Flex)`\n  flex-direction: column;\n  margin-bottom: 24px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  }\n`\n\nconst SearchSortContainer = styled(Flex)`\n  gap: 10px;\n  justify-content: space-between;\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\n\nconst NUMBER_OF_LAUNCHPADS_VISIBLE = 12\n\nconst Launchpads: React.FC = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { launchpads } = useLaunchpads(account)\n  const [numberOfLaunchpadsVisible, setNumberOfLaunchpadsVisible] = useState(NUMBER_OF_LAUNCHPADS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n\n  useEffect(() => {\n    const showMoreLaunchpads = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfLaunchpadsVisible((launchpadsCurrentlyVisible) => launchpadsCurrentlyVisible + NUMBER_OF_LAUNCHPADS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreLaunchpads, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortLaunchpads = (launchpadsToSort: Launchpad[]) => {\n    switch (sortOption) {\n      case 'amount':\n        // Ternary is needed to prevent launchpads without APR (like MIX) getting top spot\n        return orderBy(\n          launchpadsToSort,\n          (launchpad: Launchpad) => (launchpad.amount),\n          'desc',\n        )\n      default:\n        return launchpadsToSort\n    }\n  }\n\n  const launchpadsToShow = () => {\n    let _launchpad = [];\n    _launchpad = launchpads\n    if (searchQuery) {\n      const lowercaseQuery = searchQuery.toLowerCase()\n      _launchpad = launchpads.filter((launchpad) => launchpad.projectTitle.toLowerCase().includes(lowercaseQuery),\n      )\n    }\n    return sortLaunchpads(_launchpad).slice(0, numberOfLaunchpadsVisible)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\n            <Heading as=\"h1\" scale=\"xl\" color=\"primary\" mb=\"24px\">\n              {t('Lauchpad')}\n            </Heading>\n            <Text color=\"text\" fontWeight=\"400\" fontSize=\"24px\" lineHeight=\"24px\">\n            {t('Participate in new project.')}\n            </Text>\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        <LaunchpadControls justifyContent=\"flex-end\">\n          <SearchSortContainer>\n            <Flex flexDirection=\"column\" width=\"50%\">\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Sort by')}\n              </Text>\n              <ControlStretch>\n                <Select\n                  options={[\n                    {\n                      label: t('Hot'),\n                      value: 'hot',\n                    },\n                    {\n                      label: t('amount'),\n                      value: 'amount',\n                    },\n                  ]}\n                  onChange={handleSortOptionChange}\n                />\n              </ControlStretch>\n            </Flex>\n            <Flex flexDirection=\"column\" width=\"50%\">\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Search')}\n              </Text>\n              <ControlStretch>\n                <SearchInput onChange={handleChangeSearchQuery} placeholder=\"Search Launchpads\" />\n              </ControlStretch>\n            </Flex>\n          </SearchSortContainer>\n        </LaunchpadControls>\n        <CardLayout>\n          {launchpadsToShow().map((launchpad) => <ProjectCard key={launchpad.projectId} launchpad={launchpad} account={account} />\n          )}\n        </CardLayout>\n        <div ref={loadMoreRef} />\n        <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/decorations/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        />\n      </Page>\n    </>\n  )\n}\n\nexport default Launchpads\n","import { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from 'utils/@sdk'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useENS from 'hooks/ENS/useENS'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useTradeExactIn, useTradeExactOut } from 'hooks/Trades'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { isAddress } from 'utils'\nimport { computeSlippageAdjustedAmounts } from 'utils/prices'\nimport { Launchpad, State } from 'state/types'\nimport useRefresh from 'hooks/useRefresh'\nimport { AppDispatch, AppState, useAppDispatch } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceLaunchpadState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { LaunchpadState } from './reducer'\nimport { useUserSlippageTolerance } from '../user/hooks'\nimport { fetchLaunchpadsUserDataAsync } from '.'\n\nexport function useLaunchpadState(): AppState['launchpad'] {\n  return useSelector<AppState, AppState['launchpad']>((state) => state.launchpad)\n}\n\nexport function useLaunchpadActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'BNB' : '',\n        }),\n      )\n    },\n    [dispatch],\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // v2 router 02\n]\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\n  return (\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\n  )\n}\n\n// from the current launchpad inputs, compute the best trade and return it.\nexport function useDerivedLaunchpadInfo(): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmount: CurrencyAmount | undefined\n  v2Trade: Trade | undefined\n  inputError?: string\n} {\n  const { account } = useActiveWeb3React()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useLaunchpadState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = 'Connect Wallet'\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? 'Enter an amount'\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? 'Select a token'\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? 'Enter a recipient'\n  } else if (\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\n    (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\n    (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\n  ) {\n    inputError = inputError ?? 'Invalid recipient'\n  }\n\n  const [allowedSlippage] = useUserSlippageTolerance()\n\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [\n    currencyBalances[Field.INPUT],\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\n  ]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = `Insufficient ${amountIn.currency.symbol} balance`\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade ?? undefined,\n    inputError,\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'BNB') return 'BNB'\n    if (valid === false) return 'BNB'\n  }\n  return 'BNB' ?? ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToLaunchpadState(parsedQs: ParsedQs): LaunchpadState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = ''\n    } else {\n      outputCurrency = ''\n    }\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n  }\n}\n\n// updates the launchpad state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const parsedQs = useParsedQueryString()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToLaunchpadState(parsedQs)\n\n    dispatch(\n      replaceLaunchpadState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: null,\n      }),\n    )\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n\n  return result\n}\n\nexport const useLaunchpads = (account): { launchpads: Launchpad[]; userDataLoaded: boolean } => {  \n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchLaunchpadsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n\n  const { launchpads, userDataLoaded } = useSelector((state: State) => ({\n    launchpads: state.launchpad.data,\n    userDataLoaded: state.launchpad.userDataLoaded,\n  }))\n  return { launchpads, userDataLoaded }\n}"],"sourceRoot":""}