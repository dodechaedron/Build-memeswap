{"version":3,"sources":["views/PoolFinder/index.tsx","components/Links/index.tsx"],"names":["Fields","StyledButton","styled","Button","_ref","theme","colors","input","_ref2","text","_ref3","background","_ref4","PoolFinder","_ref5","account","useActiveWeb3React","t","useTranslation","activeField","setActiveField","useState","TOKEN1","currency0","setCurrency0","ETHER","currency1","setCurrency1","pairState","pair","usePair","undefined","addPair","usePairAdder","useEffect","validPairNoLiquidity","PairState","NOT_EXISTS","Boolean","EXISTS","JSBI","equal","reserve0","raw","BigInt","reserve1","position","useTokenBalance","liquidityToken","hasPosition","greaterThan","handleCurrencySelect","useCallback","currency","TOKEN0","prerequisiteMessage","_jsx","LightCard","padding","children","Text","textAlign","onPresentCurrencyModal","useModal","CurrencySearchModal","onCurrencySelect","showCommonBases","selectedCurrency","Page","_jsxs","AppBody","AppHeader","title","subtitle","backTo","AutoColumn","style","gap","endIcon","ChevronDownIcon","onClick","Row","CurrencyLogo","ml","symbol","ColumnCenter","AddIcon","as","justifyItems","backgroundColor","borderRadius","StyledInternalLink","to","MinimalPositionCard","justify","currencyId","INVALID","fontWeight","LOADING","Dots","Link","primary"],"mappings":"8HAAA,mDAqBKA,EArBL,4KAqBW,SAANA,OAAM,mBAANA,IAAM,oBAANA,MAAM,KAKX,MAAMC,EAAeC,YAAOC,IAAO;sBACbC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAOC;WACvCC,IAAA,IAAC,MAAEH,GAAOG,EAAA,OAAKH,EAAMC,OAAOG;;;eAGxBC,IAAA,IAAC,MAAEL,GAAOK,EAAA,OAAKL,EAAMC,OAAOK;;iBAE1BC,IAAA,IAAC,MAAEP,GAAOO,EAAA,OAAKP,EAAMC,OAAOK;;;;;;EAQ9B,SAASE,IAAc,IAADC,EACnC,MAAM,QAAEC,GAAYC,eACd,EAAEC,GAAMC,eAEPC,EAAaC,GAAkBC,mBAAiBrB,EAAOsB,SACvDC,EAAWC,GAAgBH,mBAA0BI,MACrDC,EAAWC,GAAgBN,mBAA0B,OAErDO,EAAWC,GAAQC,YAAiB,OAATP,QAAS,IAATA,SAAaQ,EAAoB,OAATL,QAAS,IAATA,SAAaK,GACjEC,EAAUC,cAChBC,qBAAU,KACJL,GACFG,EAAQH,KAET,CAACA,EAAMG,IAEV,MAAMG,EACJP,IAAcQ,IAAUC,YACxBC,QACEV,IAAcQ,IAAUG,QACtBV,GACAW,IAAKC,MAAMZ,EAAKa,SAASC,IAAKH,IAAKI,OAAO,KAC1CJ,IAAKC,MAAMZ,EAAKgB,SAASF,IAAKH,IAAKI,OAAO,KAG1CE,EAAoCC,YAAuB,OAAPhC,QAAO,IAAPA,SAAWgB,EAAe,OAAJF,QAAI,IAAJA,OAAI,EAAJA,EAAMmB,gBAChFC,EAAcX,QAAQQ,GAAYN,IAAKU,YAAYJ,EAASH,IAAKH,IAAKI,OAAO,KAE7EO,EAAuBC,uBAC1BC,IACKlC,IAAgBnB,EAAOsD,OACzB9B,EAAa6B,GAEb1B,EAAa0B,KAGjB,CAAClC,IAGGoC,EACJC,cAACC,IAAS,CAACC,QAAQ,YAAWC,SAC5BH,cAACI,KAAI,CAACC,UAAU,SAAQF,SAC+B1C,EAAnDF,EAAqD,yCAAzC,0CAKb+C,GAA0BC,aAC/BP,cAACQ,IAAmB,CAClBC,iBAAkBd,EAClBe,iBAAe,EACfC,iBAAwE,QAAxDrD,EAAGK,IAAgBnB,EAAOsD,OAAS5B,EAAYH,SAAS,IAAAT,SAAKiB,KAE/E,GACA,EACA,uBAGF,OACEyB,cAACY,IAAI,CAAAT,SACHU,eAACC,IAAO,CAAAX,SAAA,CACNH,cAACe,IAAS,CAACC,MAAOvD,EAAE,eAAgBwD,SAAUxD,EAAE,2BAA4ByD,OAAO,UACnFL,eAACM,IAAU,CAACC,MAAO,CAAElB,QAAS,QAAUmB,IAAI,KAAIlB,SAAA,CAC9CH,cAACvD,EAAY,CACX6E,QAAStB,cAACuB,IAAe,IACzBC,QAASA,KACPlB,IACA1C,EAAepB,EAAOsD,SACtBK,SAEDpC,EACC8C,eAACY,IAAG,CAAAtB,SAAA,CACFH,cAAC0B,IAAY,CAAC7B,SAAU9B,IACxBiC,cAACI,KAAI,CAACuB,GAAG,MAAKxB,SAAEpC,EAAU6D,YAG5B5B,cAACI,KAAI,CAACuB,GAAG,MAAKxB,SAAE1C,EAAE,sBAItBuC,cAAC6B,IAAY,CAAA1B,SACXH,cAAC8B,IAAO,MAGV9B,cAACvD,EAAY,CACX6E,QAAStB,cAACuB,IAAe,IACzBC,QAASA,KACPlB,IACA1C,EAAepB,EAAOsB,SACtBqC,SAEDjC,EACC2C,eAACY,IAAG,CAAAtB,SAAA,CACFH,cAAC0B,IAAY,CAAC7B,SAAU3B,IACxB8B,cAACI,KAAI,CAACuB,GAAG,MAAKxB,SAAEjC,EAAU0D,YAG5B5B,cAACI,KAAI,CAAC2B,GAAIN,IAAItB,SAAE1C,EAAE,sBAIrBgC,GACCoB,eAACgB,IAAY,CACXT,MAAO,CAAEY,aAAc,SAAUC,gBAAiB,GAAI/B,QAAS,WAAYgC,aAAc,QAAS/B,SAAA,CAElGH,cAACI,KAAI,CAACC,UAAU,SAAQF,SAAE1C,EAAE,iBAC5BuC,cAACmC,IAAkB,CAACC,GAAG,QAAOjC,SAC5BH,cAACI,KAAI,CAACC,UAAU,SAAQF,SAAE1C,EAAE,4BAKjCM,GAAaG,EACZE,IAAcQ,IAAUG,OACtBU,GAAepB,EACb2B,cAACqC,IAAmB,CAAChE,KAAMA,IAE3B2B,cAACC,IAAS,CAACC,QAAQ,YAAWC,SAC5BU,eAACM,IAAU,CAACE,IAAI,KAAKiB,QAAQ,SAAQnC,SAAA,CACnCH,cAACI,KAAI,CAACC,UAAU,SAAQF,SAAE1C,EAAE,qDAC5BuC,cAACmC,IAAkB,CAACC,GAAI,QAAQG,YAAWxE,MAAcwE,YAAWrE,KAAaiC,SAC/EH,cAACI,KAAI,CAACC,UAAU,SAAQF,SAAE1C,EAAE,0BAKlCkB,EACFqB,cAACC,IAAS,CAACC,QAAQ,YAAWC,SAC5BU,eAACM,IAAU,CAACE,IAAI,KAAKiB,QAAQ,SAAQnC,SAAA,CACnCH,cAACI,KAAI,CAACC,UAAU,SAAQF,SAAE1C,EAAE,oBAC5BuC,cAACmC,IAAkB,CAACC,GAAI,QAAQG,YAAWxE,MAAcwE,YAAWrE,KAAaiC,SAC9E1C,EAAE,uBAIPW,IAAcQ,IAAU4D,QAC1BxC,cAACC,IAAS,CAACC,QAAQ,YAAWC,SAC5BH,cAACmB,IAAU,CAACE,IAAI,KAAKiB,QAAQ,SAAQnC,SACnCH,cAACI,KAAI,CAACC,UAAU,SAASoC,WAAY,IAAItC,SACtC1C,EAAE,uBAIPW,IAAcQ,IAAU8D,QAC1B1C,cAACC,IAAS,CAACC,QAAQ,YAAWC,SAC5BH,cAACmB,IAAU,CAACE,IAAI,KAAKiB,QAAQ,SAAQnC,SACnCU,eAACT,KAAI,CAACC,UAAU,SAAQF,SAAA,CACrB1C,EAAE,WACHuC,cAAC2C,IAAI,WAIT,KAEJ5C,Y,iCCnMZ,mBAIA,MAAMoC,EAAqBzF,YAAOkG,IAAK;;;WAG5BhG,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAAKC,EAAMC,OAAO+F;;;;;;;;;;;;;;;EAiBxBV","file":"static/js/20.5c7174d3.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Currency, ETHER, JSBI, TokenAmount } from 'utils/@sdk'\nimport { Button, ChevronDownIcon, Text, AddIcon, useModal } from 'components/_uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LightCard } from '../../components/Card'\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\nimport { CurrencyLogo } from '../../components/Logo'\nimport { MinimalPositionCard } from '../../components/PositionCard'\nimport Row from '../../components/Layout/Row'\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\nimport { PairState, usePair } from '../../hooks/usePairs'\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\nimport { usePairAdder } from '../../state/user/hooks'\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport StyledInternalLink from '../../components/Links'\nimport { currencyId } from '../../utils/currencyId'\nimport Dots from '../../components/Loader/Dots'\nimport { AppHeader, AppBody } from '../../components/App'\nimport Page from '../Page'\n\nenum Fields {\n  TOKEN0 = 0,\n  TOKEN1 = 1,\n}\n\nconst StyledButton = styled(Button)`\n  background-color: ${({ theme }) => theme.colors.input};\n  color: ${({ theme }) => theme.colors.text};\n  :hover{\n    div{\n      color: ${({ theme }) => theme.colors.background};\n      div{\n        color: ${({ theme }) => theme.colors.background};\n      }\n    }    \n  }\n  box-shadow: none;\n  border-radius: 8px;;\n`\n\nexport default function PoolFinder() {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\n  const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\n\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\n  const addPair = usePairAdder()\n  useEffect(() => {\n    if (pair) {\n      addPair(pair)\n    }\n  }, [pair, addPair])\n\n  const validPairNoLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS ||\n    Boolean(\n      pairState === PairState.EXISTS &&\n        pair &&\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0)),\n    )\n\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\n\n  const handleCurrencySelect = useCallback(\n    (currency: Currency) => {\n      if (activeField === Fields.TOKEN0) {\n        setCurrency0(currency)\n      } else {\n        setCurrency1(currency)\n      }\n    },\n    [activeField],\n  )\n\n  const prerequisiteMessage = (\n    <LightCard padding=\"45px 10px\">\n      <Text textAlign=\"center\">\n        {!account ? t('Connect to a wallet to find pools') : t('Select a token to find your liquidity.')}\n      </Text>\n    </LightCard>\n  )\n\n  const [onPresentCurrencyModal] = useModal(\n    <CurrencySearchModal\n      onCurrencySelect={handleCurrencySelect}\n      showCommonBases\n      selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n    />,\n    true,\n    true,\n    'selectCurrencyModal',\n  )\n\n  return (\n    <Page>\n      <AppBody>\n        <AppHeader title={t('Import Pool')} subtitle={t('Import an existing pool')} backTo=\"/pool\" />\n        <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN0)\n            }}\n          >\n            {currency0 ? (\n              <Row>\n                <CurrencyLogo currency={currency0} />\n                <Text ml=\"8px\">{currency0.symbol}</Text>\n              </Row>\n            ) : (\n              <Text ml=\"8px\">{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          <ColumnCenter>\n            <AddIcon />\n          </ColumnCenter>\n\n          <StyledButton\n            endIcon={<ChevronDownIcon />}\n            onClick={() => {\n              onPresentCurrencyModal()\n              setActiveField(Fields.TOKEN1)\n            }}\n          >\n            {currency1 ? (\n              <Row>\n                <CurrencyLogo currency={currency1} />\n                <Text ml=\"8px\">{currency1.symbol}</Text>\n              </Row>\n            ) : (\n              <Text as={Row}>{t('Select a Token')}</Text>\n            )}\n          </StyledButton>\n\n          {hasPosition && (\n            <ColumnCenter\n              style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\n            >\n              <Text textAlign=\"center\">{t('Pool Found!')}</Text>\n              <StyledInternalLink to=\"/pool\">\n                <Text textAlign=\"center\">{t('Manage this pool.')}</Text>\n              </StyledInternalLink>\n            </ColumnCenter>\n          )}\n\n          {currency0 && currency1 ? (\n            pairState === PairState.EXISTS ? (\n              hasPosition && pair ? (\n                <MinimalPositionCard pair={pair} />\n              ) : (\n                <LightCard padding=\"45px 10px\">\n                  <AutoColumn gap=\"sm\" justify=\"center\">\n                    <Text textAlign=\"center\">{t('You don’t have liquidity in this pool yet.')}</Text>\n                    <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                      <Text textAlign=\"center\">{t('Add Liquidity')}</Text>\n                    </StyledInternalLink>\n                  </AutoColumn>\n                </LightCard>\n              )\n            ) : validPairNoLiquidity ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">{t('No pool found.')}</Text>\n                  <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\n                    {t('Create pool.')}\n                  </StyledInternalLink>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.INVALID ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\" fontWeight={500}>\n                    {t('Invalid pair.')}\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : pairState === PairState.LOADING ? (\n              <LightCard padding=\"45px 10px\">\n                <AutoColumn gap=\"sm\" justify=\"center\">\n                  <Text textAlign=\"center\">\n                    {t('Loading')}\n                    <Dots />\n                  </Text>\n                </AutoColumn>\n              </LightCard>\n            ) : null\n          ) : (\n            prerequisiteMessage\n          )}\n        </AutoColumn>\n\n        {/* <CurrencySearchModal\n          isOpen={showSearch}\n          onCurrencySelect={handleCurrencySelect}\n          onDismiss={handleSearchDismiss}\n          showCommonBases\n          selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\n        /> */}\n      </AppBody>\n    </Page>\n  )\n}\n","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\n// An internal link from the react-router-dom library that is correctly styled\nconst StyledInternalLink = styled(Link)`\n  text-decoration: none;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary};\n  font-weight: 500;\n\n  :hover {\n    text-decoration: underline;\n  }\n\n  :focus {\n    outline: none;\n    text-decoration: underline;\n  }\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nexport default StyledInternalLink\n"],"sourceRoot":""}