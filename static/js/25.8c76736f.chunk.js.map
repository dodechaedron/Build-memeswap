{"version":3,"sources":["../node_modules/lodash/max.js","views/Home/hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CardText.tsx","views/Home/components/StakingCard.tsx","hooks/api.ts","views/Home/components/TotalValueLockedCard.tsx","hooks/useIntersectionObserver.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/PlainCard.tsx","views/Home/Home.tsx"],"names":["baseExtremum","require","baseGt","identity","module","exports","array","length","undefined","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","useState","account","useWeb3React","fastRefresh","useRefresh","useEffect","async","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","rawResults","multicall","masterChefABI","results","index","balance","BigNumber","fetchBalances","CardValue","_ref","value","decimals","fontSize","lineHeight","prefix","bold","color","countUp","update","useCountUp","start","end","duration","separator","updateValue","useRef","current","_jsxs","Text","style","textTransform","children","CardBusdValue","props","_jsx","Block","styled","div","CakeHarvestBalance","farmsWithBalance","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","gt","UnlockButton","width","CardText","text","StyledStakingCard","Card","FarmedStakingCard","t","useTranslation","balancesWithValue","filter","balanceType","NavLink","exact","activeClassName","to","id","CardBody","StyledTotalValueLockedCard","TotalValueLockedCard","data","useGetStats","setData","response","fetch","responseData","json","error","console","fetchData","tvl","toLocaleString","maximumFractionDigits","fontWeight","mb","_Fragment","decoration","shadow","useIntersectionObserver","observerRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","IntersectionObserver","entry","rootMargin","threshold","observe","StyledFarmStakingCard","CardCorner","CardMidContent","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","cakeRewardsApr","lpRewardsApr","getFarmApr","poolWeight","lpAddresses","ChainId","MAINNET","maxApr","max","aprText","earnAprText","earnUpTo","InFarms","split","Flex","justifyContent","ref","ArrowForwardIcon","StyledPlainCard","invert","theme","colors","secondary","_ref2","decorationImage","PlainCard","_ref3","title","redirect","Cards","CTACardsItems","CTACards","BaseLayout","mediaQueries","sm","lg","Home","Page","StakingCard"],"mappings":"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","file":"static/js/25.8c76736f.chunk.js","sourcesContent":["var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from 'hooks/useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from 'components/_uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '24px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'secondary',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color} textTransform=\"uppercase\">\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"32px\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithBalance } from 'views/Home/hooks/useFarmsWithBalance'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport UnlockButton from 'components/UnlockButton'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-top: 5px;\n  display: flex;\n`\n\ninterface CakeHarvestBalanceProps {\n  farmsWithBalance: FarmWithBalance[]\n}\n\nconst CakeHarvestBalance: React.FC<CakeHarvestBalanceProps> = ({ farmsWithBalance }) => {\n  const { account } = useWeb3React()\n  const earningsSum = farmsWithBalance.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning.balance)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Block>\n        <UnlockButton width=\"100%\" />\n      </Block>\n    )\n  } else {\n    return (\n      <Block>\n        <CardValue value={earningsSum} lineHeight=\"32px\" />\n        {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} color=\"textSubtle\"/>}\n      </Block>\n    )\n  }\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from 'components/_uikit'\n\nexport interface CardTextProps {\n  text: string\n  fontSize?: string\n  lineHeight?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardText: React.FC<CardTextProps> = ({\n  text,\n  fontSize = '40px',\n  lineHeight = '1',\n  bold = true,\n  color = 'secondary',\n}) => {\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color} textTransform=\"uppercase\">\n      {text}\n    </Text>\n  )\n}\n\nexport default CardText\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody } from 'components/_uikit'\nimport { NavLink } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'views/Home/hooks/useFarmsWithBalance'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CardText from './CardText'\n\nconst StyledStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  min-height: 104px;\n`\n\nconst Block = styled.div`\n`\n\nconst FarmedStakingCard = () => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.gt(0))\n\n  return (\n    <StyledStakingCard>\n      { account ? (\n        <NavLink exact activeClassName=\"active\" to=\"/pools\" id=\"farm-apr-cta\">\n          <CardBody>\n            <Block>\n              <CardText fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" bold={false} text={t('Coin to Harvest')}/>\n              <CakeHarvestBalance farmsWithBalance={balancesWithValue} />\n            </Block>\n          </CardBody>\n        </NavLink>\n      ) : (\n        <CardBody>\n          <Block>\n            <CardText fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" bold={false} text={t('Coin to Harvest')}/>\n            <CakeHarvestBalance farmsWithBalance={balancesWithValue} />\n          </Block>\n        </CardBody>\n      )}\n    </StyledStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import { useEffect, useState } from 'react'\n\n/* eslint-disable camelcase */\nexport interface DeBankTvlResponse {\n  id: string\n  chain: string\n  name: string\n  site_url: string\n  logo_url: string\n  has_supported_portfolio: boolean\n  tvl: number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\n        const responseData: DeBankTvlResponse = await response.json()\n\n        setData(responseData)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Text } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  // text-align: center;\n  padding-top: 60px;\n  border-color: transparent;\n  box-shadow: none;\n`\n\nconst TotalValueLockedCard = () => {\n  const { t } = useTranslation()\n  const data = useGetStats()\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n        <Text color=\"primaryDark\" fontSize=\"20px\" fontWeight=\"700\" mb=\"8px\" textTransform=\"uppercase\" >{t('Total Value Locked (TVL)')}</Text>\n        {data ? (\n          <>\n            <Text color=\"text\" fontWeight=\"800\" fontSize=\"32px\" lineHeight=\"36px\" decoration=\"none solid rgb(255, 255, 255)\" shadow=\"0px 2px 1px rgba(0,0,0,0.5)\">{`$${tvl}`}</Text>\n          </>\n        ) : (\n          <Text color=\"text\" fontWeight=\"800\" fontSize=\"32px\" lineHeight=\"36px\" decoration=\"none solid rgb(255, 255, 255)\" shadow=\"0px 2px 1px rgba(0,0,0,0.5)\">$</Text>\n        )}\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useRef, useState } from 'react'\n\nconst useIntersectionObserver = () => {\n  const observerRef = useRef<HTMLDivElement>(null)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const [isIntersecting, setIsIntersecting] = useState(false)\n\n  useEffect(() => {\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\n      setIsIntersecting(entry.isIntersecting)\n    }\n\n    if (!observerIsSet) {\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      intersectionObserver.observe(observerRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  return { observerRef, isIntersecting }\n}\n\nexport default useIntersectionObserver\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, Card,  Flex, ArrowForwardIcon } from 'components/_uikit'\nimport { ChainId } from 'utils/@sdk'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\n\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  min-height: 104px;\n  padding-left: 24px;\n  padding-right: 24px;\n  position: relative;\n  background-color: transparent;\n`\n\nconst Block = styled.div`\n  position: absolute;\n  top: 50%;\n  width: calc( 100% - 48px);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n`\n\nconst CardCorner = styled.div`\n  position: absolute;\n  bottom: calc(50% - 16px);\n  right: 0;\n`;\n\nconst CardMidContent = styled(Text).attrs({ fontWeight:\"700\" , fontSize:\"24px\" , lineHeight:\"24px\" })`\n`\n\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    if (isIntersecting) {\n      fetchFarmData()\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          const { cakeRewardsApr, lpRewardsApr } = getFarmApr(\n            new BigNumber(farm.poolWeight),\n            cakePrice,\n            totalLiquidity,\n            farm.lpAddresses[ChainId.MAINNET],\n          )\n          return cakeRewardsApr + lpRewardsApr\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn from %highestApr% APR', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <Block>\n          <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"24px\">\n            {earnUpTo}\n          </Text>\n          <Flex justifyContent=\"space-between\">\n            <CardMidContent color=\"secondary\">\n              {highestApr && !isFetchingFarmData ? (\n                `${InFarms} ${highestApr}%`\n              ) : (\n                <>\n                  {`${InFarms}`}\n                  <div ref={observerRef} />\n                </>\n              )}             \n            </CardMidContent>\n            <CardCorner>\n              <ArrowForwardIcon color=\"primary\" width=\"32px\"/>\n            </CardCorner>\n          </Flex>\n        </Block>      \n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Card, ArrowForwardIcon, Text } from 'components/_uikit'\nimport { NavLink } from 'react-router-dom'\n\nconst StyledPlainCard = styled(Card)<{invert : boolean, decorationImage: string}>`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  min-height: 104px;\n  padding-left: 24px;\n  padding-right: 24px;\n  position: relative;\n  background-color: ${({ invert, theme }) => invert ? theme.colors.secondary : `transparent`};\n  ${({decorationImage}) => decorationImage === '' ? '':\n    `&:before{\n      content: \"\";\n      position: absolute;\n      width: 133px;\n      height: 165px;\n      top: -14%;\n      right: -25px;\n      z-index: -1;\n      background: url(${decorationImage}) 0 0 no-repeat;\n      transform: rotate(-10deg);\n    }`\n  }  \n`\n\nconst Block = styled.div`\n  position: absolute;\n  top: 50%;\n  width: calc( 100% - 48px);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n`\n\nconst CardCorner = styled.div`\n  position: absolute;\n  bottom: calc(50% - 16px);\n  right: 0;\n`;\nexport interface CardValueProps {\n  text: string,\n  title?: string,\n  invert?: boolean,\n  redirect?: string,\n  decorationImage?: string,\n}\n\nconst PlainCard: React.FC<CardValueProps> = ({\n  text,\n  title,\n  invert = false,\n  redirect = \"\",\n  decorationImage = \"\",\n}) => {\n\n  return (\n    <StyledPlainCard invert={invert} decorationImage={decorationImage}>      \n      { redirect === \"\" ? \n          (\n          <Block>\n            {title && (\n              <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"24px\">\n                {title}\n              </Text>\n            )}\n            <Flex justifyContent=\"space-between\">\n              <Text color={ invert ? \"text\" : \"secondary\"} fontWeight=\"700\" fontSize=\"24px\" lineHeight=\"24px\">\n                {text}\n              </Text>\n            </Flex>\n          </Block>      \n          )\n        : (\n          <NavLink exact activeClassName=\"active\" to={redirect} id=\"farm-apr-cta\">\n            <Block>\n              {title && (\n                <Text color=\"textSubtle\" fontWeight=\"400\" fontSize=\"14px\" lineHeight=\"24px\">\n                  {title}\n                </Text>\n              )}\n              <Flex justifyContent=\"space-between\">\n                <Text color={ invert ? \"text\" : \"secondary\"} fontWeight=\"700\" fontSize=\"24px\" lineHeight=\"24px\">\n                  {text}\n                </Text>\n                <CardCorner>\n                  <ArrowForwardIcon color={ invert ? \"background\" : \"primary\"} width=\"32px\"/>\n                </CardCorner>\n              </Flex>\n            </Block>      \n          </NavLink>\n      )}\n    </StyledPlainCard>\n  )\n}\n\nexport default PlainCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, BaseLayout } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport StakingCard from 'views/Home/components/StakingCard'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport PlainCard from './components/PlainCard'\n\nconst Cards = styled.div`\n  align-items: stretch;\n  justify-content: stretch;\n`\n\nconst CTACardsItems = styled.div`\n  // min-width: 300px\n`\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-top: 128px;\n  margin-bottom: 24px;\n  column-gap: 22px;\n  row-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <div>\n        <Cards>\n          <TotalValueLockedCard />\n        </Cards>\n        <CTACards>\n          <CTACardsItems>\n            <Text color=\"primary\" mb=\"12px\" fontWeight=\"600\" fontSize=\"20px\" lineHeight=\"24px\">\n              {t('Swap')}\n            </Text>\n            <PlainCard text={t('1TRC')} title={t('LISTED')} decorationImage=\"images/decorations/cryptonews.svg\"/>\n          </CTACardsItems>\n          <CTACardsItems>\n            <Text color=\"primary\" mb=\"12px\" fontWeight=\"600\" fontSize=\"20px\" lineHeight=\"24px\">\n              {t('Staking')}\n            </Text>\n            <StakingCard />\n          </CTACardsItems>\n          <CTACardsItems>\n            <Text color=\"primary\" mb=\"12px\" fontWeight=\"600\" fontSize=\"20px\" lineHeight=\"24px\">\n              {t('Farming')}\n            </Text>\n            <EarnAPRCard />\n          </CTACardsItems>\n          <CTACardsItems>\n            <Text color=\"primary\" mb=\"12px\" fontWeight=\"600\" fontSize=\"20px\" lineHeight=\"24px\">\n              {t('Launchpad')}\n            </Text>\n            <PlainCard text={t('1TRC Live Now!')}/>\n          </CTACardsItems>\n          <CTACardsItems>\n            <Text color=\"primary\" mb=\"12px\" fontWeight=\"600\" fontSize=\"20px\" lineHeight=\"24px\">\n              {t('Lending & Borrowing')}\n            </Text>\n            <PlainCard text={t('Comming Soon')}/>\n          </CTACardsItems>\n          <CTACardsItems>\n            <Text color=\"primary\" mb=\"12px\" fontWeight=\"600\" fontSize=\"20px\" lineHeight=\"24px\">\n              {t('Advertising')}\n            </Text>\n            <PlainCard text={t('Advertise your projects here')} redirect=\"/advert\" invert/>\n          </CTACardsItems>\n        </CTACards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}