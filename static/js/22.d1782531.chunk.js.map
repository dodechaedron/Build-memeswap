{"version":3,"sources":["views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftCard/EasterNftCard.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx","state/hooks.ts"],"names":["InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","_ref","theme","colors","text","TransferNftModal","_ref2","nft","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","useState","value","setValue","error","setError","t","useTranslation","account","useWeb3React","contract","useERC721","getAddressByType","type","toastSuccess","useToast","_jsxs","Modal","title","children","_jsx","color","mb","nftName","name","htmlFor","Input","id","placeholder","onChange","evt","inputValue","target","isWarning","disabled","Button","width","variant","onClick","async","ethers","utils","isAddress","tx","transferFrom","wait","status","err","console","ClaimNftModal","onClaim","isConfirming","setIsConfirming","toastError","Flex","alignItems","justifyContent","bold","endIcon","AutoRenewIcon","spin","Container","cardBorder","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","attrs","InfoBlock","NftCard","_profile$nft","canClaim","refresh","isOpen","setIsOpen","profile","useProfile","identifier","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleSuccess","onPresentTransferModal","useModal","onPresentClaimModal","Card","isActive","CardBody","Heading","Tag","outline","mt","CardFooter","p","as","style","textAlign","NftGrid","mediaQueries","sm","md","teamNftMap","EasterNftCard","props","isClaimable","setIsClaimable","team","easterNftContract","useEasterNftContract","useEffect","fetchClaimStatus","response","mintNFT","nftComponents","NftList","useGetCollectibles","dispatch","useAppDispatch","handleRefresh","fetchWalletNfts","orderBy","nfts","map","StyledHero","textSubtle","Collectibles","Page","scale","useGetSortedRounds","roundData","useGetRounds","rounds","useSelector","state","predictions","Object","keys","reduce","accum","epoch","parseBigNumberObj","values","useGetBetByEpoch","bets","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","minBy","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalBlocks","intervalBlocks","useGetTotalIntervalBlocks","bufferBlocks","useGetPredictionsStatus","useGetHistoryFilter","historyFilter","useGetCurrentRoundBlockNumber","currentRoundStartBlockNumber","useGetMinBetAmount","minBetAmount","useMemo","BigNumber","from","useGetRewardRate","rewardRate","useGetIsFetchingHistory","isFetchingHistory","useGetHistoryByAccount","history","useGetLastOraclePrice","lastOraclePrice","isInitialized","data","collectibles","identifiers","nftsInWallet","Nfts","filter","includes"],"mappings":"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","file":"static/js/22.d1782531.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Input, Modal, Text } from 'components/_uikit'\nimport { getAddressByType } from 'utils/collectibles'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC721 } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const contract = useERC721(getAddressByType(nft.type))\n  const { toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = ethers.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(t('Please enter a valid wallet address'))\n      } else {\n        const tx = await contract.transferFrom(account, value, tokenIds[0])\n        setIsLoading(true)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          onDismiss()\n          onSuccess()\n          toastSuccess(t('NFT successfully transferred!'))\n        } else {\n          setError(t('Unable to transfer NFT'))\n          setIsLoading(false)\n        }\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={t('Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{t('Transferring')}:</Text>\n          <Value>{t('1x %nftName% NFT', { nftName: nft.name })}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{t('Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={t('Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from 'components/_uikit'\nimport { Nft } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\ninterface ClaimNftModalProps extends InjectedModalProps {\n  nft: Nft\n  onSuccess: () => void\n  onClaim: () => Promise<ethers.providers.TransactionResponse>\n}\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    const tx = await onClaim()\n    setIsConfirming(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Successfully claimed!'))\n      onDismiss()\n      onSuccess()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsConfirming(false)\n    }\n  }\n\n  return (\n    <Modal title={t('Claim Collectible')} onDismiss={onDismiss}>\n      <ModalContent>\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\n          <Text>{t('You will receive')}:</Text>\n          <Text bold>{t('1x %nftName% Collectible', { nftName: nft.name })}</Text>\n        </Flex>\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          onClick={handleConfirm}\n          disabled={!account}\n          isLoading={isConfirming}\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Nft } from 'config/constants/types'\n\ninterface PreviewProps {\n  nft: Nft\n  isOwned?: boolean\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 24px 24px 0 0;\n`\n\nconst StyledVideo = styled.video`\n  height: 100%;\n  width: 100%;\n`\n\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\n  const { images, name, video } = nft\n  const previewImageSrc = `/images/nfts/${images.lg}`\n\n  if (video) {\n    const videoComponent = (\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\n        <source src={video.webm} type=\"video/webm\" />\n        <source src={video.mp4} type=\"video/mp4\" />\n      </StyledVideo>\n    )\n\n    return isOwned ? (\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n        {videoComponent}\n      </a>\n    ) : (\n      videoComponent\n    )\n  }\n\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\n\n  return (\n    <Container>\n      {isOwned ? (\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Preview\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from 'components/_uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport TransferNftModal from '../TransferNftModal'\nimport ClaimNftModal from '../ClaimNftModal'\nimport Preview from './Preview'\n\nexport interface NftCardProps {\n  nft: Nft\n  canClaim?: boolean\n  tokenIds?: number[]\n  onClaim?: () => Promise<ethers.providers.TransactionResponse>\n  refresh: () => void\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft, canClaim = false, tokenIds = [], onClaim, refresh }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const { profile } = useProfile()\n  const { identifier, name, description } = nft\n  const walletOwnsNft = tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const handleSuccess = () => {\n    refresh()\n  }\n\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} onClaim={onClaim} />)\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Preview nft={nft} isOwned={walletOwnsNft} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {walletOwnsNft && (\n            <Tag outline variant=\"secondary\">\n              {t('In Wallet')}\n            </Tag>\n          )}\n          {profile?.nft?.identifier === identifier && (\n            <Tag outline variant=\"success\">\n              {t('Profile Pic')}\n            </Tag>\n          )}\n        </Header>\n        {canClaim && (\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\n            {t('Claim this NFT')}\n          </Button>\n        )}\n        {walletOwnsNft && (\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {t('Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {t('Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {t(description)}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\n\nconst NftGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nexport default NftGrid\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useProfile } from 'state/profile/hooks'\nimport { useEasterNftContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\n/**\n * A map of NFT bunny Ids to Team ids\n * [identifier]: teamId\n */\nexport const teamNftMap = {\n  'easter-storm': 1,\n  'easter-flipper': 2,\n  'easter-caker': 3,\n}\n\nconst EasterNftCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const { profile } = useProfile()\n  const { identifier } = nft\n  const { team } = profile ?? {}\n  const easterNftContract = useEasterNftContract()\n\n  const handleClaim = async () => {\n    const response: ethers.providers.TransactionResponse = await easterNftContract.mintNFT()\n    await response.wait()\n    return response\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaim = await easterNftContract.canClaim(account)\n\n      // Wallet can claim if it is claimable and the nft being displayed is mapped to the wallet's team\n      setIsClaimable(canClaim ? team.id === teamNftMap[identifier] : false)\n    }\n\n    if (account && team) {\n      fetchClaimStatus()\n    }\n  }, [account, identifier, team, easterNftContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default EasterNftCard\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport { useWeb3React } from '@web3-react/core'\nimport nfts from 'config/constants/nfts'\nimport { useAppDispatch } from 'state'\nimport { fetchWalletNfts } from 'state/collectibles'\nimport { useGetCollectibles } from 'state/hooks'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport EasterNftCard from './NftCard/EasterNftCard'\n\n/**\n * A map of bunnyIds to special campaigns (NFT distribution)\n * Each NftCard is responsible for checking it's own claim status\n *\n */\nconst nftComponents = {\n  'easter-storm': EasterNftCard,\n  'easter-flipper': EasterNftCard,\n  'easter-caker': EasterNftCard,\n}\n\nconst NftList = () => {\n  const { tokenIds } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleRefresh = () => {\n    dispatch(fetchWalletNfts(account))\n  }\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const Card = nftComponents[nft.identifier] || NftCard\n\n        return (\n          <div key={nft.name}>\n            <Card nft={nft} tokenIds={tokenIds[nft.identifier]} refresh={handleRefresh} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from 'components/_uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport NftList from './components/NftList'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Collectibles = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\n          {t('Pancake Collectibles')}\n        </Heading>\n      </StyledHero>\n      <NftList />\n    </Page>\n  )\n}\n\nexport default Collectibles\n","import { useEffect, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport Nfts from 'config/constants/nfts'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from './types'\nimport { fetchWalletNfts } from './collectibles'\nimport { parseBigNumberObj } from './predictions/helpers'\n\n// /!\\\n// Don't add anything here. These hooks will be moved the the predictions folder\n\n// Predictions\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalBlocks = () => {\n  return useSelector((state: State) => state.predictions.intervalBlocks)\n}\n\nexport const useGetBufferBlocks = () => {\n  return useSelector((state: State) => state.predictions.bufferBlocks)\n}\n\nexport const useGetTotalIntervalBlocks = () => {\n  const intervalBlocks = useGetIntervalBlocks()\n  const bufferBlocks = useGetBufferBlocks()\n  return intervalBlocks + bufferBlocks\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  return rounds.find((round) => round.epoch === currentEpoch)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetRewardRate = () => {\n  const rewardRate = useSelector((state: State) => state.predictions.rewardRate)\n  return rewardRate / 100\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetLedgerByRoundId = (account: string, roundId: string) => {\n  const ledgers = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!ledgers[account]) {\n    return null\n  }\n\n  if (!ledgers[account][roundId]) {\n    return null\n  }\n\n  return ledgers[account][roundId]\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n// Collectibles\nexport const useGetCollectibles = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\n  const identifiers = Object.keys(data)\n\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account))\n    }\n  }, [isInitialized, account, dispatch])\n\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\n  }\n}\n"],"sourceRoot":""}